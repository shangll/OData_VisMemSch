<?xml version="1.0" ?>
<PsychoPy2experiment encoding="utf-8" version="2020.2.3">
  <Settings>
    <Param name="Audio latency priority" updates="None" val="use prefs" valType="str"/>
    <Param name="Audio lib" updates="None" val="use prefs" valType="str"/>
    <Param name="Completed URL" updates="None" val="" valType="str"/>
    <Param name="Data file delimiter" updates="None" val="auto" valType="str"/>
    <Param name="Data filename" updates="None" val="u'data/%s_%s_%s' % (expInfo['participant'], expName, expInfo['date'])" valType="code"/>
    <Param name="Enable Escape" updates="None" val="True" valType="bool"/>
    <Param name="Experiment info" updates="None" val="{'participant': '', 'age': '', 'gender': &quot;['F', 'M']&quot;, 'handedness': &quot;['R', 'L']&quot;}" valType="code"/>
    <Param name="Force stereo" updates="None" val="True" valType="bool"/>
    <Param name="Full-screen window" updates="None" val="True" valType="bool"/>
    <Param name="HTML path" updates="None" val="html" valType="str"/>
    <Param name="Incomplete URL" updates="None" val="" valType="str"/>
    <Param name="Monitor" updates="None" val="testMonitor" valType="str"/>
    <Param name="Resources" updates="None" val="[]" valType="fileList"/>
    <Param name="Save csv file" updates="None" val="False" valType="bool"/>
    <Param name="Save excel file" updates="None" val="False" valType="bool"/>
    <Param name="Save log file" updates="None" val="True" valType="bool"/>
    <Param name="Save psydat file" updates="None" val="True" valType="bool"/>
    <Param name="Save wide csv file" updates="None" val="True" valType="bool"/>
    <Param name="Screen" updates="None" val="1" valType="num"/>
    <Param name="Show info dlg" updates="None" val="True" valType="bool"/>
    <Param name="Show mouse" updates="None" val="False" valType="bool"/>
    <Param name="Units" updates="None" val="height" valType="str"/>
    <Param name="Use version" updates="None" val="" valType="str"/>
    <Param name="Window size (pixels)" updates="None" val="[1920, 1080]" valType="code"/>
    <Param name="blendMode" updates="None" val="avg" valType="str"/>
    <Param name="color" updates="None" val="white" valType="str"/>
    <Param name="colorSpace" updates="None" val="rgb" valType="str"/>
    <Param name="expName" updates="None" val="Hybrid_Search_Task" valType="str"/>
    <Param name="exportHTML" updates="None" val="on Sync" valType="str"/>
    <Param name="logging level" updates="None" val="exp" valType="code"/>
  </Settings>
  <Routines>
    <Routine name="inAllStim">
      <CodeComponent name="readStim">
        <Param name="Before Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Before JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Routine" updates="constant" val="var _pj;&amp;#10;function _pj_snippets(container) {&amp;#10;    function in_es6(left, right) {&amp;#10;        if (((right instanceof Array) || ((typeof right) === &quot;string&quot;))) {&amp;#10;            return (right.indexOf(left) &gt; (- 1));&amp;#10;        } else {&amp;#10;            if (((right instanceof Map) || (right instanceof Set) || (right instanceof WeakMap) || (right instanceof WeakSet))) {&amp;#10;                return right.has(left);&amp;#10;            } else {&amp;#10;                return (left in right);&amp;#10;            }&amp;#10;        }&amp;#10;    }&amp;#10;    container[&quot;in_es6&quot;] = in_es6;&amp;#10;    return container;&amp;#10;}&amp;#10;_pj = {};&amp;#10;_pj_snippets(_pj);&amp;#10;if ((! _pj.in_es6(stimulus, oldList))) {&amp;#10;    if (((! _pj.in_es6(stimSubCate, oldTargSubList)) &amp;&amp; (subCount &lt; setsize))) {&amp;#10;        if ((stimCount === 0)) {&amp;#10;            targetList = (targetList + [stimulus]);&amp;#10;            targetDict[targKey.toString()] = stimulus;&amp;#10;            subCateT[targKey.toString()] = subCate;&amp;#10;            oldList = (oldList + [stimulus]);&amp;#10;            test1Dict[targKey.toString()] = stimulus;&amp;#10;            test2Dict[targKey.toString()] = stimulus;&amp;#10;            test3Dict[targKey.toString()] = stimulus;&amp;#10;            targKey = (targKey + 1);&amp;#10;            stimCount = (stimCount + 1);&amp;#10;        } else {&amp;#10;            if ((stimCount === 1)) {&amp;#10;                test1Dict[test1Key.toString()] = stimulus;&amp;#10;                oldList = (oldList + [stimulus]);&amp;#10;                test1Key = (test1Key + 1);&amp;#10;                stimCount = (stimCount + 1);&amp;#10;            } else {&amp;#10;                if ((stimCount === 2)) {&amp;#10;                    test2Dict[test2Key.toString()] = stimulus;&amp;#10;                    oldList = (oldList + [stimulus]);&amp;#10;                    test2Key = (test2Key + 1);&amp;#10;                    stimCount = (stimCount + 1);&amp;#10;                } else {&amp;#10;                    if ((stimCount === 3)) {&amp;#10;                        test3Dict[test3Key.toString()] = stimulus;&amp;#10;                        oldList = (oldList + [stimulus]);&amp;#10;                        test3Key = (test3Key + 1);&amp;#10;                        stimCount = (stimCount + 1);&amp;#10;                    }&amp;#10;                }&amp;#10;            }&amp;#10;        }&amp;#10;    } else {&amp;#10;        if ((((! _pj.in_es6(stimulus, oldList)) &amp;&amp; (! _pj.in_es6(stimSubCate, oldSubList))) &amp;&amp; (stimDcount &lt; 24))) {&amp;#10;            if ((((setsize === 1) || (setsize === 2)) || (setsize === 4))) {&amp;#10;                if ((stimCount === 0)) {&amp;#10;                    targDistrDictAll[tdAllCount.toString()] = stimulus;&amp;#10;                    subCateTD[tdAllCount.toString()] = subCate;&amp;#10;                    tdAllCount = (tdAllCount + 1);&amp;#10;                    stimCount = (stimCount + 1);&amp;#10;                    stimDcount = (stimDcount + 1);&amp;#10;                }&amp;#10;            } else {&amp;#10;                if ((setsize === 8)) {&amp;#10;                    if ((stimDcount &lt; 4)) {&amp;#10;                        if (((stimCount === 0) || (stimCount === 1))) {&amp;#10;                            targDistrDictAll[tdAllCount.toString()] = stimulus;&amp;#10;                            subCateTD[tdAllCount.toString()] = subCate;&amp;#10;                            tdAllCount = (tdAllCount + 1);&amp;#10;                            stimCount = (stimCount + 1);&amp;#10;                            stimDcount = (stimDcount + 1);&amp;#10;                        }&amp;#10;                    } else {&amp;#10;                        if ((stimCount === 0)) {&amp;#10;                            targDistrDictAll[tdAllCount.toString()] = stimulus;&amp;#10;                            subCateTD[tdAllCount.toString()] = subCate;&amp;#10;                            tdAllCount = (tdAllCount + 1);&amp;#10;                            stimCount = (stimCount + 1);&amp;#10;                            stimDcount = (stimDcount + 1);&amp;#10;                        }&amp;#10;                    }&amp;#10;                } else {&amp;#10;                    if ((setsize === 16)) {&amp;#10;                        if ((stimDcount &lt; 20)) {&amp;#10;                            if (((stimCount === 0) || (stimCount === 1))) {&amp;#10;                                targDistrDictAll[tdAllCount.toString()] = stimulus;&amp;#10;                                subCateTD[tdAllCount.toString()] = subCate;&amp;#10;                                tdAllCount = (tdAllCount + 1);&amp;#10;                                stimCount = (stimCount + 1);&amp;#10;                                stimDcount = (stimDcount + 1);&amp;#10;                            }&amp;#10;                        } else {&amp;#10;                            if ((stimCount === 0)) {&amp;#10;                                targDistrDictAll[tdAllCount.toString()] = stimulus;&amp;#10;                                subCateTD[tdAllCount.toString()] = subCate;&amp;#10;                                tdAllCount = (tdAllCount + 1);&amp;#10;                                stimCount = (stimCount + 1);&amp;#10;                                stimDcount = (stimDcount + 1);&amp;#10;                            }&amp;#10;                        }&amp;#10;                    }&amp;#10;                }&amp;#10;            }&amp;#10;        }&amp;#10;    }&amp;#10;}&amp;#10;" valType="extendedCode"/>
        <Param name="Begin Routine" updates="constant" val="if stimulus not in oldList:&amp;#10;    if (stimSubCate not in oldTargSubList) and (subCount &lt; setsize):&amp;#10;        if stimCount == 0:&amp;#10;            targetList = targetList + [stimulus]&amp;#10;            targetDict[str(targKey)] = stimulus&amp;#10;            subCateT[str(targKey)] = subCate&amp;#10;            oldList = oldList + [stimulus]&amp;#10;            test1Dict[str(targKey)] = stimulus&amp;#10;            test2Dict[str(targKey)] = stimulus&amp;#10;            test3Dict[str(targKey)] = stimulus&amp;#10;            targKey = targKey + 1&amp;#10;            stimCount = stimCount + 1&amp;#10;        elif stimCount == 1:&amp;#10;            test1Dict[str(test1Key)] = stimulus&amp;#10;            oldList = oldList + [stimulus]&amp;#10;            test1Key = test1Key + 1&amp;#10;            stimCount = stimCount + 1&amp;#10;        elif stimCount == 2:&amp;#10;            test2Dict[str(test2Key)] = stimulus&amp;#10;            oldList = oldList + [stimulus]&amp;#10;            test2Key = test2Key + 1&amp;#10;            stimCount = stimCount + 1&amp;#10;        elif stimCount == 3:&amp;#10;            test3Dict[str(test3Key)] = stimulus&amp;#10;            oldList = oldList + [stimulus]&amp;#10;            test3Key = test3Key + 1&amp;#10;            stimCount = stimCount + 1&amp;#10;&amp;#10;    elif (stimulus not in oldList) and (stimSubCate not in oldSubList) \&amp;#10;    and (stimDcount &lt; 24):&amp;#10;        if (setsize == 1) or (setsize == 2) or (setsize == 4):&amp;#10;            if stimCount == 0:&amp;#10;                targDistrDictAll[str(tdAllCount)] = stimulus&amp;#10;                subCateTD[str(tdAllCount)] = subCate&amp;#10;                tdAllCount = tdAllCount + 1&amp;#10;                stimCount = stimCount + 1&amp;#10;                stimDcount = stimDcount + 1&amp;#10;        elif setsize == 8:&amp;#10;            if stimDcount &lt; 4:&amp;#10;                if (stimCount == 0) or (stimCount == 1):&amp;#10;                    targDistrDictAll[str(tdAllCount)] = stimulus&amp;#10;                    subCateTD[str(tdAllCount)] = subCate&amp;#10;                    tdAllCount = tdAllCount + 1&amp;#10;                    stimCount = stimCount + 1&amp;#10;                    stimDcount = stimDcount + 1&amp;#10;            else:&amp;#10;                if stimCount == 0:&amp;#10;                    targDistrDictAll[str(tdAllCount)] = stimulus&amp;#10;                    subCateTD[str(tdAllCount)] = subCate&amp;#10;                    tdAllCount = tdAllCount + 1&amp;#10;                    stimCount = stimCount + 1&amp;#10;                    stimDcount = stimDcount + 1&amp;#10;        elif setsize == 16:&amp;#10;            if stimDcount &lt; 20:&amp;#10;                if (stimCount == 0) or (stimCount == 1):&amp;#10;                    targDistrDictAll[str(tdAllCount)] = stimulus&amp;#10;                    subCateTD[str(tdAllCount)] = subCate&amp;#10;                    tdAllCount = tdAllCount + 1&amp;#10;                    stimCount = stimCount + 1&amp;#10;                    stimDcount = stimDcount + 1&amp;#10;            else:&amp;#10;                if stimCount == 0:&amp;#10;                    targDistrDictAll[str(tdAllCount)] = stimulus&amp;#10;                    subCateTD[str(tdAllCount)] = subCate&amp;#10;                    tdAllCount = tdAllCount + 1&amp;#10;                    stimCount = stimCount + 1&amp;#10;                    stimDcount = stimDcount + 1" valType="extendedCode"/>
        <Param name="Code Type" updates="None" val="Auto-&gt;JS" valType="str"/>
        <Param name="Each Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="Each JS Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="name" updates="None" val="readStim" valType="code"/>
      </CodeComponent>
    </Routine>
    <Routine name="subCountBegin">
      <CodeComponent name="subBegin">
        <Param name="Before Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Before JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Routine" updates="constant" val="cateTag = stimCate;&amp;#10;if ((cateTag === &quot;Animals&quot;)) {&amp;#10;    altCateTag = &quot;Objects&quot;;&amp;#10;} else {&amp;#10;    altCateTag = &quot;Animals&quot;;&amp;#10;}&amp;#10;oldTargSubList = [];&amp;#10;oldSubList = [];&amp;#10;targetList = [];&amp;#10;targetDict = {};&amp;#10;targDistrDictAll = {};&amp;#10;altDistrDictAll = {};&amp;#10;test1Dict = {};&amp;#10;test2Dict = {};&amp;#10;test3Dict = {};&amp;#10;searchDict = {};&amp;#10;searchCate = {};&amp;#10;searchSubCate = {};&amp;#10;subCateT = {};&amp;#10;subCateTD = {};&amp;#10;subCateD = {};&amp;#10;subCount = 0;&amp;#10;stimDcount = 0;&amp;#10;targKey = 0;&amp;#10;tdAllCount = 0;&amp;#10;dAllCount = 0;&amp;#10;test1Key = setsize;&amp;#10;test2Key = setsize;&amp;#10;test3Key = setsize;&amp;#10;" valType="extendedCode"/>
        <Param name="Begin Routine" updates="constant" val="cateTag = stimCate&amp;#10;if cateTag == &quot;Animals&quot;:&amp;#10;    altCateTag = &quot;Objects&quot;&amp;#10;else:&amp;#10;    altCateTag = &quot;Animals&quot;&amp;#10;&amp;#10;oldTargSubList = []&amp;#10;oldSubList = []&amp;#10;targetList = []&amp;#10;targetDict = {}&amp;#10;targDistrDictAll = {}&amp;#10;altDistrDictAll = {}&amp;#10;test1Dict = {}&amp;#10;test2Dict = {}&amp;#10;test3Dict = {}&amp;#10;searchDict = {}&amp;#10;searchCate = {}&amp;#10;searchSubCate = {}&amp;#10;subCateT = {}&amp;#10;subCateTD = {}&amp;#10;subCateD = {}&amp;#10;&amp;#10;subCount = 0&amp;#10;stimDcount = 0&amp;#10;targKey = 0&amp;#10;tdAllCount = 0&amp;#10;dAllCount = 0&amp;#10;test1Key = setsize&amp;#10;test2Key = setsize&amp;#10;test3Key = setsize" valType="extendedCode"/>
        <Param name="Code Type" updates="None" val="Auto-&gt;JS" valType="str"/>
        <Param name="Each Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="Each JS Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="name" updates="None" val="subBegin" valType="code"/>
      </CodeComponent>
    </Routine>
    <Routine name="stimCountBegin">
      <CodeComponent name="stimBegin">
        <Param name="Before Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Before JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Routine" updates="constant" val="stimCount = 0;&amp;#10;" valType="extendedCode"/>
        <Param name="Begin Routine" updates="constant" val="stimCount = 0" valType="extendedCode"/>
        <Param name="Code Type" updates="None" val="Auto-&gt;JS" valType="str"/>
        <Param name="Each Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="Each JS Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="name" updates="None" val="stimBegin" valType="code"/>
      </CodeComponent>
    </Routine>
    <Routine name="subCountPlus">
      <CodeComponent name="subPlus">
        <Param name="Before Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Before JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="Code Type" updates="None" val="Auto-&gt;JS" valType="str"/>
        <Param name="Each Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="Each JS Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Routine" updates="constant" val="var _pj;&amp;#10;function _pj_snippets(container) {&amp;#10;    function in_es6(left, right) {&amp;#10;        if (((right instanceof Array) || ((typeof right) === &quot;string&quot;))) {&amp;#10;            return (right.indexOf(left) &gt; (- 1));&amp;#10;        } else {&amp;#10;            if (((right instanceof Map) || (right instanceof Set) || (right instanceof WeakMap) || (right instanceof WeakSet))) {&amp;#10;                return right.has(left);&amp;#10;            } else {&amp;#10;                return (left in right);&amp;#10;            }&amp;#10;        }&amp;#10;    }&amp;#10;    container[&quot;in_es6&quot;] = in_es6;&amp;#10;    return container;&amp;#10;}&amp;#10;_pj = {};&amp;#10;_pj_snippets(_pj);&amp;#10;if (((! _pj.in_es6(stimSubCate, oldTargSubList)) &amp;&amp; (subCount &lt; setsize))) {&amp;#10;    oldTargSubList = (oldTargSubList + [stimSubCate]);&amp;#10;    subCount = (subCount + 1);&amp;#10;} else {&amp;#10;    if ((((! _pj.in_es6(stimSubCate, oldSubList)) &amp;&amp; (stimDcount &lt; 24)) &amp;&amp; (subCount &gt;= setsize))) {&amp;#10;        oldSubList = (oldSubList + [stimSubCate]);&amp;#10;    }&amp;#10;}&amp;#10;" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="if (stimSubCate not in oldTargSubList) and (subCount &lt; setsize):&amp;#10;    oldTargSubList = oldTargSubList + [stimSubCate]&amp;#10;    subCount = subCount + 1&amp;#10;elif (stimSubCate not in oldSubList) and (stimDcount &lt; 24) and \&amp;#10;(subCount &gt;= setsize):&amp;#10;    oldSubList = oldSubList + [stimSubCate]" valType="extendedCode"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="name" updates="None" val="subPlus" valType="code"/>
      </CodeComponent>
    </Routine>
    <Routine name="listMerge">
      <CodeComponent name="mergeCode">
        <Param name="Before Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Before JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Routine" updates="constant" val="schCount = 48;&amp;#10;if ((setsize === 1)) {&amp;#10;    for (var schLoop = 0, _pj_a = 12; (schLoop &lt; _pj_a); schLoop += 1) {&amp;#10;        searchDict[schCount.toString()] = targetDict[&quot;0&quot;];&amp;#10;        searchCate[schCount.toString()] = cateTag;&amp;#10;        searchSubCate[schCount.toString()] = subCateT[&quot;0&quot;];&amp;#10;        schCount = (schCount + 1);&amp;#10;    }&amp;#10;} else {&amp;#10;    if ((setsize === 2)) {&amp;#10;        for (var schLoop = 0, _pj_a = 6; (schLoop &lt; _pj_a); schLoop += 1) {&amp;#10;            searchDict[schCount.toString()] = targetDict[&quot;0&quot;];&amp;#10;            searchCate[schCount.toString()] = cateTag;&amp;#10;            searchSubCate[schCount.toString()] = subCateT[&quot;0&quot;];&amp;#10;            schCount = (schCount + 1);&amp;#10;        }&amp;#10;        for (var schLoop = 6, _pj_a = 12; (schLoop &lt; _pj_a); schLoop += 1) {&amp;#10;            searchDict[schCount.toString()] = targetDict[&quot;1&quot;];&amp;#10;            searchCate[schCount.toString()] = cateTag;&amp;#10;            searchSubCate[schCount.toString()] = subCateT[&quot;1&quot;];&amp;#10;            schCount = (schCount + 1);&amp;#10;        }&amp;#10;    } else {&amp;#10;        if ((setsize === 4)) {&amp;#10;            for (var schLoop = 0, _pj_a = 3; (schLoop &lt; _pj_a); schLoop += 1) {&amp;#10;                searchDict[schCount.toString()] = targetDict[&quot;0&quot;];&amp;#10;                searchCate[schCount.toString()] = cateTag;&amp;#10;                searchSubCate[schCount.toString()] = subCateT[&quot;0&quot;];&amp;#10;                schCount = (schCount + 1);&amp;#10;            }&amp;#10;            for (var schLoop = 3, _pj_a = 6; (schLoop &lt; _pj_a); schLoop += 1) {&amp;#10;                searchDict[schCount.toString()] = targetDict[&quot;1&quot;];&amp;#10;                searchCate[schCount.toString()] = cateTag;&amp;#10;                searchSubCate[schCount.toString()] = subCateT[&quot;1&quot;];&amp;#10;                schCount = (schCount + 1);&amp;#10;            }&amp;#10;            for (var schLoop = 6, _pj_a = 9; (schLoop &lt; _pj_a); schLoop += 1) {&amp;#10;                searchDict[schCount.toString()] = targetDict[&quot;2&quot;];&amp;#10;                searchCate[schCount.toString()] = cateTag;&amp;#10;                searchSubCate[schCount.toString()] = subCateT[&quot;2&quot;];&amp;#10;                schCount = (schCount + 1);&amp;#10;            }&amp;#10;            for (var schLoop = 9, _pj_a = 12; (schLoop &lt; _pj_a); schLoop += 1) {&amp;#10;                searchDict[schCount.toString()] = targetDict[&quot;3&quot;];&amp;#10;                searchCate[schCount.toString()] = cateTag;&amp;#10;                searchSubCate[schCount.toString()] = subCateT[&quot;3&quot;];&amp;#10;                schCount = (schCount + 1);&amp;#10;            }&amp;#10;        } else {&amp;#10;            if ((setsize === 8)) {&amp;#10;                for (var sizeloop = 0, _pj_a = 8; (sizeloop &lt; _pj_a); sizeloop += 1) {&amp;#10;                    searchDict[schCount.toString()] = targetDict[sizeloop.toString()];&amp;#10;                    searchCate[schCount.toString()] = cateTag;&amp;#10;                    searchSubCate[schCount.toString()] = subCateT[sizeloop.toString()];&amp;#10;                    schCount = (schCount + 1);&amp;#10;                }&amp;#10;                for (var sizeloop = 0, _pj_a = 4; (sizeloop &lt; _pj_a); sizeloop += 1) {&amp;#10;                    searchDict[schCount.toString()] = targetDict[sizeloop.toString()];&amp;#10;                    searchCate[schCount.toString()] = cateTag;&amp;#10;                    searchSubCate[schCount.toString()] = subCateT[sizeloop.toString()];&amp;#10;                    schCount = (schCount + 1);&amp;#10;                }&amp;#10;            } else {&amp;#10;                if ((setsize === 16)) {&amp;#10;                    for (var sizeloop = 0, _pj_a = 12; (sizeloop &lt; _pj_a); sizeloop += 1) {&amp;#10;                        searchDict[schCount.toString()] = targetDict[sizeloop.toString()];&amp;#10;                        searchCate[schCount.toString()] = cateTag;&amp;#10;                        searchSubCate[schCount.toString()] = subCateT[sizeloop.toString()];&amp;#10;                        schCount = (schCount + 1);&amp;#10;                    }&amp;#10;                }&amp;#10;            }&amp;#10;        }&amp;#10;    }&amp;#10;}&amp;#10;ACClist = {};&amp;#10;TBRcount = 0;&amp;#10;endExpTag = 0;&amp;#10;stLoopCtrl = 1;&amp;#10;thLoopCtrl = 1;&amp;#10;testLoopCtrl = 1;&amp;#10;memoText = &quot;Memorizing&quot;;&amp;#10;testDict = test1Dict;&amp;#10;testText = &quot;Testing 1&quot;;&amp;#10;schPresenLoop = 1;&amp;#10;ACCschSum = 0;&amp;#10;ACCrejSum = 0;&amp;#10;testLoopNum = testOrd;&amp;#10;" valType="extendedCode"/>
        <Param name="Begin Routine" updates="constant" val="schCount = 48&amp;#10;&amp;#10;if setsize == 1:&amp;#10;    for schLoop in range(12):&amp;#10;        searchDict[str(schCount)] = targetDict[&quot;0&quot;]&amp;#10;        searchCate[str(schCount)] = cateTag&amp;#10;        searchSubCate[str(schCount)] = subCateT[&quot;0&quot;]&amp;#10;        schCount = schCount + 1&amp;#10;&amp;#10;elif setsize == 2:&amp;#10;    for schLoop in range(0, 6):&amp;#10;        searchDict[str(schCount)] = targetDict[&quot;0&quot;]&amp;#10;        searchCate[str(schCount)] = cateTag&amp;#10;        searchSubCate[str(schCount)] = subCateT[&quot;0&quot;]&amp;#10;        schCount = schCount + 1&amp;#10;    for schLoop in range(6, 12):&amp;#10;        searchDict[str(schCount)] = targetDict[&quot;1&quot;]&amp;#10;        searchCate[str(schCount)] = cateTag&amp;#10;        searchSubCate[str(schCount)] = subCateT[&quot;1&quot;]&amp;#10;        schCount = schCount + 1&amp;#10;&amp;#10;elif setsize == 4:&amp;#10;    for schLoop in range(3):&amp;#10;        searchDict[str(schCount)] = targetDict[&quot;0&quot;]&amp;#10;        searchCate[str(schCount)] = cateTag&amp;#10;        searchSubCate[str(schCount)] = subCateT[&quot;0&quot;]&amp;#10;        schCount = schCount + 1&amp;#10;    for schLoop in range(3, 6):&amp;#10;        searchDict[str(schCount)] = targetDict[&quot;1&quot;]&amp;#10;        searchCate[str(schCount)] = cateTag&amp;#10;        searchSubCate[str(schCount)] = subCateT[&quot;1&quot;]&amp;#10;        schCount = schCount + 1&amp;#10;    for schLoop in range(6, 9):&amp;#10;        searchDict[str(schCount)] = targetDict[&quot;2&quot;]&amp;#10;        searchCate[str(schCount)] = cateTag&amp;#10;        searchSubCate[str(schCount)] = subCateT[&quot;2&quot;]&amp;#10;        schCount = schCount + 1&amp;#10;    for schLoop in range(9, 12):&amp;#10;        searchDict[str(schCount)] = targetDict[&quot;3&quot;]&amp;#10;        searchCate[str(schCount)] = cateTag&amp;#10;        searchSubCate[str(schCount)] = subCateT[&quot;3&quot;]&amp;#10;        schCount = schCount + 1&amp;#10;&amp;#10;elif setsize == 8:&amp;#10;    for sizeloop in range(8):&amp;#10;        searchDict[str(schCount)] = targetDict[str(sizeloop)]&amp;#10;        searchCate[str(schCount)] = cateTag&amp;#10;        searchSubCate[str(schCount)] = subCateT[str(sizeloop)]&amp;#10;        schCount = schCount + 1&amp;#10;    for sizeloop in range(4):&amp;#10;        searchDict[str(schCount)] = targetDict[str(sizeloop)]&amp;#10;        searchCate[str(schCount)] = cateTag&amp;#10;        searchSubCate[str(schCount)] = subCateT[str(sizeloop)]&amp;#10;        schCount = schCount + 1&amp;#10;&amp;#10;elif setsize == 16:&amp;#10;    for sizeloop in range(12):&amp;#10;        searchDict[str(schCount)] = targetDict[str(sizeloop)]&amp;#10;        searchCate[str(schCount)] = cateTag&amp;#10;        searchSubCate[str(schCount)] = subCateT[str(sizeloop)]&amp;#10;        schCount = schCount + 1&amp;#10;&amp;#10;ACClist = {}&amp;#10;TBRcount = 0&amp;#10;endExpTag = 0&amp;#10;stLoopCtrl = 1&amp;#10;thLoopCtrl = 1&amp;#10;testLoopCtrl = 1&amp;#10;memoText = &quot;Memorizing&quot;&amp;#10;testDict = test1Dict&amp;#10;testText= &quot;Testing 1&quot;&amp;#10;schPresenLoop = 1&amp;#10;ACCschSum = 0&amp;#10;ACCrejSum = 0&amp;#10;&amp;#10;testLoopNum = testOrd" valType="extendedCode"/>
        <Param name="Code Type" updates="None" val="Auto-&gt;JS" valType="str"/>
        <Param name="Each Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="Each JS Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="name" updates="None" val="mergeCode" valType="code"/>
      </CodeComponent>
    </Routine>
    <Routine name="preExp">
      <CodeComponent name="prePars">
        <Param name="Before Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Before JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Routine" updates="constant" val="distrN = 24;&amp;#10;targetN = 12;&amp;#10;trialN = 60;&amp;#10;oldList = [];&amp;#10;" valType="extendedCode"/>
        <Param name="Begin Routine" updates="constant" val="distrN = 24&amp;#10;targetN = 12&amp;#10;trialN = 60&amp;#10;oldList = []&amp;#10;#oldTargSubList = []" valType="extendedCode"/>
        <Param name="Code Type" updates="None" val="Auto-&gt;JS" valType="str"/>
        <Param name="Each Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="Each JS Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="name" updates="None" val="prePars" valType="code"/>
      </CodeComponent>
    </Routine>
    <Routine name="distrCtrl">
      <CodeComponent name="distrCtrlCode">
        <Param name="Before Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Before JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Routine" updates="constant" val="dAllCount = 0;&amp;#10;" valType="extendedCode"/>
        <Param name="Begin Routine" updates="constant" val="dAllCount = 0" valType="extendedCode"/>
        <Param name="Code Type" updates="None" val="Auto-&gt;JS" valType="str"/>
        <Param name="Each Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="Each JS Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="name" updates="None" val="distrCtrlCode" valType="code"/>
      </CodeComponent>
    </Routine>
    <Routine name="distrCountBegin">
      <CodeComponent name="distrBegin">
        <Param name="Before Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Before JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Routine" updates="constant" val="distrCount = 0;&amp;#10;altDistrCount = 24;&amp;#10;" valType="extendedCode"/>
        <Param name="Begin Routine" updates="constant" val="distrCount = 0&amp;#10;altDistrCount = 24" valType="extendedCode"/>
        <Param name="Code Type" updates="None" val="Auto-&gt;JS" valType="str"/>
        <Param name="Each Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="Each JS Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="name" updates="None" val="distrBegin" valType="code"/>
      </CodeComponent>
    </Routine>
    <Routine name="studyHint">
      <TextComponent name="stHint">
        <Param name="color" updates="constant" val="black" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.06" valType="code"/>
        <Param name="name" updates="None" val="stHint" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="1.2" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="set every repeat" val="$memoText" valType="str"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
      </TextComponent>
      <TextComponent name="stFix">
        <Param name="color" updates="constant" val="black" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.06" valType="code"/>
        <Param name="name" updates="None" val="stFix" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="1.2" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="0.8" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="constant" val="+" valType="str"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
      </TextComponent>
    </Routine>
    <Routine name="TBRLoopCtrl">
      <CodeComponent name="studyLoopCode">
        <Param name="Before Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Before JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Routine" updates="constant" val="studyCount = 0;&amp;#10;ACCsum = 0;&amp;#10;ACCrejSum = 0;&amp;#10;flag = 0;&amp;#10;" valType="extendedCode"/>
        <Param name="Begin Routine" updates="constant" val="studyCount = 0&amp;#10;ACCsum = 0&amp;#10;ACCrejSum = 0&amp;#10;flag = 0" valType="extendedCode"/>
        <Param name="Code Type" updates="None" val="Auto-&gt;JS" valType="str"/>
        <Param name="Each Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="Each JS Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="name" updates="None" val="studyLoopCode" valType="code"/>
      </CodeComponent>
    </Routine>
    <Routine name="testTrials">
      <CodeComponent name="inTestImg">
        <Param name="Before Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Before JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Routine" updates="constant" val="var _pj;&amp;#10;function _pj_snippets(container) {&amp;#10;    function in_es6(left, right) {&amp;#10;        if (((right instanceof Array) || ((typeof right) === &quot;string&quot;))) {&amp;#10;            return (right.indexOf(left) &gt; (- 1));&amp;#10;        } else {&amp;#10;            if (((right instanceof Map) || (right instanceof Set) || (right instanceof WeakMap) || (right instanceof WeakSet))) {&amp;#10;                return right.has(left);&amp;#10;            } else {&amp;#10;                return (left in right);&amp;#10;            }&amp;#10;        }&amp;#10;    }&amp;#10;    container[&quot;in_es6&quot;] = in_es6;&amp;#10;    return container;&amp;#10;}&amp;#10;_pj = {};&amp;#10;_pj_snippets(_pj);&amp;#10;testN = testIndx.toString();&amp;#10;if (_pj.in_es6(testDict[testN], targetList)) {&amp;#10;    testAns = &quot;z&quot;;&amp;#10;} else {&amp;#10;    testAns = &quot;m&quot;;&amp;#10;}&amp;#10;" valType="extendedCode"/>
        <Param name="Begin Routine" updates="constant" val="testN = str(testIndx)&amp;#10;if testDict[testN] in targetList:&amp;#10;    testAns = &quot;z&quot;&amp;#10;else:&amp;#10;    testAns = &quot;m&quot;" valType="extendedCode"/>
        <Param name="Code Type" updates="None" val="Auto-&gt;JS" valType="str"/>
        <Param name="Each Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="Each JS Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="name" updates="None" val="inTestImg" valType="code"/>
      </CodeComponent>
      <ImageComponent name="testImg">
        <Param name="color" updates="constant" val="$[1,1,1]" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flipHoriz" updates="constant" val="False" valType="bool"/>
        <Param name="flipVert" updates="constant" val="False" valType="bool"/>
        <Param name="image" updates="set every repeat" val="$testDict[testN]" valType="str"/>
        <Param name="interpolate" updates="constant" val="linear" valType="str"/>
        <Param name="mask" updates="constant" val="None" valType="str"/>
        <Param name="name" updates="None" val="testImg" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="size" updates="constant" val="(0.2, 0.2)" valType="code"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="texture resolution" updates="constant" val="128" valType="code"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
      </ImageComponent>
      <KeyboardComponent name="testResp">
        <Param name="allowedKeys" updates="constant" val="'z','m'" valType="code"/>
        <Param name="correctAns" updates="constant" val="$testAns" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="discard previous" updates="constant" val="True" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="forceEndRoutine" updates="constant" val="True" valType="bool"/>
        <Param name="name" updates="None" val="testResp" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="store" updates="constant" val="first key" valType="str"/>
        <Param name="storeCorrect" updates="constant" val="True" valType="bool"/>
        <Param name="syncScreenRefresh" updates="constant" val="True" valType="bool"/>
      </KeyboardComponent>
      <CodeComponent name="testCountPlus">
        <Param name="Before Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Before JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="Code Type" updates="None" val="Auto-&gt;JS" valType="str"/>
        <Param name="Each Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="Each JS Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Routine" updates="constant" val="if ((testResp.corr === 1)) {&amp;#10;    fbkText = &quot;Correct!&quot;;&amp;#10;    clr = &quot;green&quot;;&amp;#10;} else {&amp;#10;    fbkText = &quot;Wrong!&quot;;&amp;#10;    clr = &quot;red&quot;;&amp;#10;}&amp;#10;ACCsum = (ACCsum + testResp.corr);&amp;#10;test_loop.addData(&quot;testsize&quot;, setsize);&amp;#10;test_loop.addData(&quot;condTest&quot;, cateTag);&amp;#10;" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="if testResp.corr == 1:&amp;#10;    fbkText = &quot;Correct!&quot;&amp;#10;    clr = &quot;green&quot;&amp;#10;else:&amp;#10;    fbkText = &quot;Wrong!&quot;&amp;#10;    clr = &quot;red&quot;&amp;#10;&amp;#10;ACCsum = ACCsum + testResp.corr&amp;#10;test_loop.addData(&quot;testsize&quot;, setsize)&amp;#10;test_loop.addData(&quot;condTest&quot;, cateTag)" valType="extendedCode"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="name" updates="None" val="testCountPlus" valType="code"/>
      </CodeComponent>
    </Routine>
    <Routine name="studyTrials">
      <CodeComponent name="inStimImg">
        <Param name="Before Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Before JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Routine" updates="constant" val="studyN = studyCount.toString();&amp;#10;" valType="extendedCode"/>
        <Param name="Begin Routine" updates="constant" val="studyN = str(studyCount)" valType="extendedCode"/>
        <Param name="Code Type" updates="None" val="Auto-&gt;JS" valType="str"/>
        <Param name="Each Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="Each JS Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="name" updates="None" val="inStimImg" valType="code"/>
      </CodeComponent>
      <ImageComponent name="studyImg">
        <Param name="color" updates="constant" val="$[1,1,1]" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flipHoriz" updates="constant" val="False" valType="bool"/>
        <Param name="flipVert" updates="constant" val="False" valType="bool"/>
        <Param name="image" updates="set every repeat" val="$targetDict[studyN]" valType="str"/>
        <Param name="interpolate" updates="constant" val="linear" valType="str"/>
        <Param name="mask" updates="constant" val="None" valType="str"/>
        <Param name="name" updates="None" val="studyImg" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="size" updates="constant" val="(0.2, 0.2)" valType="code"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="3" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="texture resolution" updates="constant" val="128" valType="code"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
      </ImageComponent>
      <ImageComponent name="studyITI">
        <Param name="color" updates="constant" val="$[1,1,1]" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flipHoriz" updates="constant" val="False" valType="bool"/>
        <Param name="flipVert" updates="constant" val="False" valType="bool"/>
        <Param name="image" updates="constant" val="Instructions/ITI.png" valType="str"/>
        <Param name="interpolate" updates="constant" val="linear" valType="str"/>
        <Param name="mask" updates="constant" val="None" valType="str"/>
        <Param name="name" updates="None" val="studyITI" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="size" updates="constant" val="(1.6, 1)" valType="code"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="3" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="0.95" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="texture resolution" updates="constant" val="128" valType="code"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
      </ImageComponent>
      <CodeComponent name="studyCountPlus">
        <Param name="Before Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Before JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="Code Type" updates="None" val="Auto-&gt;JS" valType="str"/>
        <Param name="Each Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="Each JS Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Routine" updates="constant" val="studyCount = (studyCount + 1);&amp;#10;" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="studyCount = studyCount + 1" valType="extendedCode"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="name" updates="None" val="studyCountPlus" valType="code"/>
      </CodeComponent>
    </Routine>
    <Routine name="testHint">
      <TextComponent name="ttHint">
        <Param name="color" updates="constant" val="black" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.06" valType="code"/>
        <Param name="name" updates="None" val="ttHint" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="1.2" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="set every repeat" val="$testText" valType="str"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
      </TextComponent>
      <TextComponent name="ttFix">
        <Param name="color" updates="constant" val="black" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.06" valType="code"/>
        <Param name="name" updates="None" val="ttFix" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="1.2" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="0.8" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="set every repeat" val="+" valType="str"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
      </TextComponent>
    </Routine>
    <Routine name="test_iti">
      <TextComponent name="fbkTest">
        <Param name="color" updates="set every repeat" val="$clr" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.06" valType="code"/>
        <Param name="name" updates="None" val="fbkTest" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="0.6" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="set every repeat" val="$fbkText" valType="str"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
      </TextComponent>
      <ImageComponent name="testITI">
        <Param name="color" updates="constant" val="$[1,1,1]" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flipHoriz" updates="constant" val="False" valType="bool"/>
        <Param name="flipVert" updates="constant" val="False" valType="bool"/>
        <Param name="image" updates="constant" val="Instructions/ITI.png" valType="str"/>
        <Param name="interpolate" updates="constant" val="linear" valType="str"/>
        <Param name="mask" updates="constant" val="None" valType="str"/>
        <Param name="name" updates="None" val="testITI" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="size" updates="constant" val="(1.6, 1)" valType="code"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.6" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="0.5" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="texture resolution" updates="constant" val="128" valType="code"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
      </ImageComponent>
    </Routine>
    <Routine name="expEND">
      <TextComponent name="expENDtest">
        <Param name="color" updates="constant" val="black" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.05" valType="code"/>
        <Param name="name" updates="None" val="expENDtest" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="constant" val="Your accuracy is too low, so we have to finish the experiment.&amp;#10;Please enter Esc to exit full screen mode and then close the browser.&amp;#10;Thank you for your participation.&amp;#10;Have a good day." valType="str"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
      </TextComponent>
    </Routine>
    <Routine name="TBRcountPlus">
      <CodeComponent name="TBRplus">
        <Param name="Before Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Before JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Routine" updates="constant" val="ACClist[TBRcount.toString()] = (ACCsum / (setsize * 2));&amp;#10;TBRcount = (TBRcount + 1);&amp;#10;if ((TBRcount === 1)) {&amp;#10;    if ((ACClist[&quot;0&quot;] &gt;= 0.8)) {&amp;#10;        endExpTag = 0;&amp;#10;        stLoopCtrl = 0;&amp;#10;        thLoopCtrl = 1;&amp;#10;        testLoopCtrl = 1;&amp;#10;        testDict = test2Dict;&amp;#10;        testText = &quot;Testing 2&quot;;&amp;#10;    } else {&amp;#10;        if ((ACClist[&quot;0&quot;] &lt; 0.8)) {&amp;#10;            endExpTag = 0;&amp;#10;            stLoopCtrl = 1;&amp;#10;            thLoopCtrl = 1;&amp;#10;            testLoopCtrl = 1;&amp;#10;            memoText = &quot;Re-Memorizing&quot;;&amp;#10;            testDict = test1Dict;&amp;#10;            testText = &quot;Testing 1&quot;;&amp;#10;        }&amp;#10;    }&amp;#10;} else {&amp;#10;    if ((((TBRcount &gt;= 2) &amp;&amp; (ACClist[&quot;0&quot;] &gt;= 0.8)) &amp;&amp; (ACClist[&quot;1&quot;] &gt;= 0.8))) {&amp;#10;        endExpTag = 0;&amp;#10;        stLoopCtrl = 0;&amp;#10;        thLoopCtrl = 0;&amp;#10;        testLoopCtrl = 0;&amp;#10;        flag = 1;&amp;#10;    } else {&amp;#10;        if ((TBRcount === 2)) {&amp;#10;            if (((ACClist[&quot;0&quot;] &gt;= 0.8) &amp;&amp; (ACClist[&quot;1&quot;] &lt; 0.8))) {&amp;#10;                endExpTag = 0;&amp;#10;                stLoopCtrl = 1;&amp;#10;                thLoopCtrl = 1;&amp;#10;                testLoopCtrl = 1;&amp;#10;                memoText = &quot;Re-Memorizing&quot;;&amp;#10;                testDict = test2Dict;&amp;#10;                testText = &quot;Testing 2&quot;;&amp;#10;            } else {&amp;#10;                if (((ACClist[&quot;0&quot;] &lt; 0.8) &amp;&amp; (ACClist[&quot;1&quot;] &gt;= 0.8))) {&amp;#10;                    endExpTag = 0;&amp;#10;                    stLoopCtrl = 0;&amp;#10;                    thLoopCtrl = 1;&amp;#10;                    testLoopCtrl = 1;&amp;#10;                    testDict = test2Dict;&amp;#10;                    testText = &quot;Testing 2&quot;;&amp;#10;                    console.log(stLoopCtrl);&amp;#10;                } else {&amp;#10;                    if (((ACClist[&quot;0&quot;] &lt; 0.8) &amp;&amp; (ACClist[&quot;1&quot;] &lt; 0.8))) {&amp;#10;                        endExpTag = 0;&amp;#10;                        stLoopCtrl = 1;&amp;#10;                        thLoopCtrl = 1;&amp;#10;                        testLoopCtrl = 1;&amp;#10;                        memoText = &quot;Re-Memorizing&quot;;&amp;#10;                        testDict = test1Dict;&amp;#10;                        testText = &quot;Testing 1&quot;;&amp;#10;                    }&amp;#10;                }&amp;#10;            }&amp;#10;        } else {&amp;#10;            if ((TBRcount === 3)) {&amp;#10;                if (((((ACClist[&quot;0&quot;] &gt;= 0.8) &amp;&amp; (ACClist[&quot;1&quot;] &lt; 0.8)) &amp;&amp; (ACClist[&quot;2&quot;] &lt; 0.8)) || (((ACClist[&quot;0&quot;] &lt; 0.8) &amp;&amp; (ACClist[&quot;1&quot;] &gt;= 0.8)) &amp;&amp; (ACClist[&quot;2&quot;] &lt; 0.8)))) {&amp;#10;                    endExpTag = 0;&amp;#10;                    stLoopCtrl = 1;&amp;#10;                    thLoopCtrl = 1;&amp;#10;                    testLoopCtrl = 1;&amp;#10;                    testDict = test2Dict;&amp;#10;                    testText = &quot;Testing 2&quot;;&amp;#10;                } else {&amp;#10;                    if ((((ACClist[&quot;0&quot;] &lt; 0.8) &amp;&amp; (ACClist[&quot;1&quot;] &lt; 0.8)) &amp;&amp; (ACClist[&quot;2&quot;] &gt;= 0.8))) {&amp;#10;                        endExpTag = 0;&amp;#10;                        stLoopCtrl = 0;&amp;#10;                        thLoopCtrl = 1;&amp;#10;                        testLoopCtrl = 1;&amp;#10;                        testDict = test2Dict;&amp;#10;                        testText = &quot;Testing 2&quot;;&amp;#10;                    } else {&amp;#10;                        if (((((ACClist[&quot;0&quot;] &lt; 0.8) &amp;&amp; (ACClist[&quot;1&quot;] &gt;= 0.8)) &amp;&amp; (ACClist[&quot;2&quot;] &gt;= 0.8)) || (((ACClist[&quot;0&quot;] &gt;= 0.8) &amp;&amp; (ACClist[&quot;1&quot;] &lt; 0.8)) &amp;&amp; (ACClist[&quot;2&quot;] &gt;= 0.8)))) {&amp;#10;                            endExpTag = 0;&amp;#10;                            stLoopCtrl = 0;&amp;#10;                            thLoopCtrl = 1;&amp;#10;                            testLoopCtrl = 1;&amp;#10;                            testDict = test3Dict;&amp;#10;                            testText = &quot;Testing 3&quot;;&amp;#10;                        } else {&amp;#10;                            if ((((ACClist[&quot;0&quot;] &lt; 0.8) &amp;&amp; (ACClist[&quot;1&quot;] &lt; 0.8)) &amp;&amp; (ACClist[&quot;2&quot;] &lt; 0.8))) {&amp;#10;                                endExpTag = 1;&amp;#10;                                stLoopCtrl = 0;&amp;#10;                                thLoopCtrl = 0;&amp;#10;                                testLoopCtrl = 0;&amp;#10;                                schPresenLoop = 0;&amp;#10;                            }&amp;#10;                        }&amp;#10;                    }&amp;#10;                }&amp;#10;            } else {&amp;#10;                if (((TBRcount &gt;= 4) &amp;&amp; (((((ACClist[&quot;0&quot;] &lt; 0.8) &amp;&amp; (ACClist[&quot;1&quot;] &gt;= 0.8)) &amp;&amp; (ACClist[&quot;2&quot;] &gt;= 0.8)) &amp;&amp; (ACClist[&quot;3&quot;] &gt;= 0.8)) || ((((ACClist[&quot;0&quot;] &gt;= 0.8) &amp;&amp; (ACClist[&quot;1&quot;] &lt; 0.8)) &amp;&amp; (ACClist[&quot;2&quot;] &gt;= 0.8)) &amp;&amp; (ACClist[&quot;3&quot;] &gt;= 0.8))))) {&amp;#10;                    endExpTag = 0;&amp;#10;                    stLoopCtrl = 0;&amp;#10;                    thLoopCtrl = 0;&amp;#10;                    testLoopCtrl = 0;&amp;#10;                    flag = 1;&amp;#10;                } else {&amp;#10;                    if ((TBRcount === 4)) {&amp;#10;                        if (((((((ACClist[&quot;0&quot;] &lt; 0.8) &amp;&amp; (ACClist[&quot;1&quot;] &lt; 0.8)) &amp;&amp; (ACClist[&quot;2&quot;] &gt;= 0.8)) &amp;&amp; (ACClist[&quot;3&quot;] &gt;= 0.8)) || ((((ACClist[&quot;0&quot;] &gt;= 0.8) &amp;&amp; (ACClist[&quot;1&quot;] &lt; 0.8)) &amp;&amp; (ACClist[&quot;2&quot;] &lt; 0.8)) &amp;&amp; (ACClist[&quot;3&quot;] &gt;= 0.8))) || ((((ACClist[&quot;0&quot;] &lt; 0.8) &amp;&amp; (ACClist[&quot;1&quot;] &gt;= 0.8)) &amp;&amp; (ACClist[&quot;2&quot;] &lt; 0.8)) &amp;&amp; (ACClist[&quot;3&quot;] &gt;= 0.8)))) {&amp;#10;                            endExpTag = 0;&amp;#10;                            stLoopCtrl = 0;&amp;#10;                            thLoopCtrl = 1;&amp;#10;                            testLoopCtrl = 1;&amp;#10;                            testDict = test3Dict;&amp;#10;                            testText = &quot;Testing 3&quot;;&amp;#10;                        } else {&amp;#10;                            if ((((((ACClist[&quot;0&quot;] &lt; 0.8) &amp;&amp; (ACClist[&quot;1&quot;] &gt;= 0.8)) &amp;&amp; (ACClist[&quot;2&quot;] &gt;= 0.8)) &amp;&amp; (ACClist[&quot;3&quot;] &lt; 0.8)) || ((((ACClist[&quot;0&quot;] &gt; 0.8) &amp;&amp; (ACClist[&quot;1&quot;] &lt; 0.8)) &amp;&amp; (ACClist[&quot;2&quot;] &gt;= 0.8)) &amp;&amp; (ACClist[&quot;3&quot;] &lt; 0.8)))) {&amp;#10;                                endExpTag = 0;&amp;#10;                                stLoopCtrl = 1;&amp;#10;                                thLoopCtrl = 1;&amp;#10;                                testLoopCtrl = 1;&amp;#10;                                testDict = test3Dict;&amp;#10;                                testText = &quot;Testing 3&quot;;&amp;#10;                            } else {&amp;#10;                                if (((((((ACClist[&quot;0&quot;] &gt;= 0.8) &amp;&amp; (ACClist[&quot;1&quot;] &lt; 0.8)) &amp;&amp; (ACClist[&quot;2&quot;] &lt; 0.8)) &amp;&amp; (ACClist[&quot;3&quot;] &lt; 0.8)) || ((((ACClist[&quot;0&quot;] &lt; 0.8) &amp;&amp; (ACClist[&quot;1&quot;] &gt;= 0.8)) &amp;&amp; (ACClist[&quot;2&quot;] &lt; 0.8)) &amp;&amp; (ACClist[&quot;3&quot;] &lt; 0.8))) || ((((ACClist[&quot;0&quot;] &lt; 0.8) &amp;&amp; (ACClist[&quot;1&quot;] &lt; 0.8)) &amp;&amp; (ACClist[&quot;2&quot;] &gt;= 0.8)) &amp;&amp; (ACClist[&quot;3&quot;] &lt; 0.8)))) {&amp;#10;                                    endExpTag = 1;&amp;#10;                                    stLoopCtrl = 0;&amp;#10;                                    thLoopCtrl = 0;&amp;#10;                                    testLoopCtrl = 0;&amp;#10;                                    schPresenLoop = 0;&amp;#10;                                }&amp;#10;                            }&amp;#10;                        }&amp;#10;                    } else {&amp;#10;                        if (((TBRcount === 5) &amp;&amp; (ACClist[&quot;4&quot;] &lt; 0.8))) {&amp;#10;                            endExpTag = 0;&amp;#10;                            stLoopCtrl = 0;&amp;#10;                            thLoopCtrl = 0;&amp;#10;                            testLoopCtrl = 0;&amp;#10;                        } else {&amp;#10;                            if (((TBRcount === 5) &amp;&amp; (ACClist[&quot;4&quot;] &gt;= 0.8))) {&amp;#10;                                endExpTag = 0;&amp;#10;                                stLoopCtrl = 0;&amp;#10;                                thLoopCtrl = 0;&amp;#10;                                testLoopCtrl = 0;&amp;#10;                            }&amp;#10;                        }&amp;#10;                    }&amp;#10;                }&amp;#10;            }&amp;#10;        }&amp;#10;    }&amp;#10;}&amp;#10;" valType="extendedCode"/>
        <Param name="Begin Routine" updates="constant" val="ACClist[str(TBRcount)] = ACCsum/(setsize*2)&amp;#10;TBRcount = TBRcount + 1&amp;#10;&amp;#10;if TBRcount == 1:&amp;#10;    if ACClist[&quot;0&quot;] &gt;= 0.8:&amp;#10;        endExpTag = 0&amp;#10;        stLoopCtrl = 0&amp;#10;        thLoopCtrl = 1&amp;#10;        testLoopCtrl = 1&amp;#10;        testDict = test2Dict&amp;#10;        testText = &quot;Testing 2&quot;&amp;#10;    elif ACClist[&quot;0&quot;] &lt; 0.8:&amp;#10;        endExpTag = 0&amp;#10;        stLoopCtrl = 1&amp;#10;        thLoopCtrl = 1&amp;#10;        testLoopCtrl = 1&amp;#10;        memoText = &quot;Re-Memorizing&quot;&amp;#10;        testDict = test1Dict&amp;#10;        testText = &quot;Testing 1&quot;&amp;#10;&amp;#10;elif TBRcount &gt;= 2 and ACClist[&quot;0&quot;] &gt;= 0.8 and ACClist[&quot;1&quot;] &gt;= 0.8:&amp;#10;        endExpTag = 0&amp;#10;        stLoopCtrl = 0&amp;#10;        thLoopCtrl = 0&amp;#10;        testLoopCtrl = 0&amp;#10;        flag = 1&amp;#10;&amp;#10;elif TBRcount == 2:&amp;#10;    if ACClist[&quot;0&quot;] &gt;= 0.8 and ACClist[&quot;1&quot;] &lt; 0.8:&amp;#10;        endExpTag = 0&amp;#10;        stLoopCtrl = 1&amp;#10;        thLoopCtrl = 1&amp;#10;        testLoopCtrl = 1&amp;#10;        memoText = &quot;Re-Memorizing&quot;&amp;#10;        testDict = test2Dict&amp;#10;        testText = &quot;Testing 2&quot;&amp;#10;    elif ACClist[&quot;0&quot;] &lt; 0.8 and ACClist[&quot;1&quot;] &gt;= 0.8:&amp;#10;        endExpTag = 0&amp;#10;        stLoopCtrl = 0&amp;#10;        thLoopCtrl = 1&amp;#10;        testLoopCtrl = 1&amp;#10;        testDict = test2Dict&amp;#10;        testText = &quot;Testing 2&quot;&amp;#10;        print(stLoopCtrl)&amp;#10;    elif ACClist[&quot;0&quot;] &lt; 0.8 and ACClist[&quot;1&quot;] &lt; 0.8:&amp;#10;        endExpTag = 0&amp;#10;        stLoopCtrl = 1&amp;#10;        thLoopCtrl = 1&amp;#10;        testLoopCtrl = 1&amp;#10;        memoText = &quot;Re-Memorizing&quot;&amp;#10;        testDict = test1Dict&amp;#10;        testText = &quot;Testing 1&quot;&amp;#10;&amp;#10;elif TBRcount == 3:&amp;#10;    if (ACClist[&quot;0&quot;] &gt;= 0.8 and ACClist[&quot;1&quot;] &lt; 0.8 and ACClist[&quot;2&quot;] &lt; 0.8) \&amp;#10;    or (ACClist[&quot;0&quot;] &lt; 0.8 and ACClist[&quot;1&quot;] &gt;= 0.8 and ACClist[&quot;2&quot;] &lt; 0.8):&amp;#10;        endExpTag = 0&amp;#10;        stLoopCtrl = 1&amp;#10;        thLoopCtrl = 1&amp;#10;        testLoopCtrl = 1&amp;#10;        testDict = test2Dict&amp;#10;        testText = &quot;Testing 2&quot;&amp;#10;    elif ACClist[&quot;0&quot;] &lt; 0.8 and ACClist[&quot;1&quot;] &lt; 0.8 and ACClist[&quot;2&quot;] &gt;= 0.8:&amp;#10;        endExpTag = 0&amp;#10;        stLoopCtrl = 0&amp;#10;        thLoopCtrl = 1&amp;#10;        testLoopCtrl = 1&amp;#10;        testDict = test2Dict&amp;#10;        testText= &quot;Testing 2&quot;&amp;#10;    elif (ACClist[&quot;0&quot;] &lt; 0.8 and ACClist[&quot;1&quot;] &gt;= 0.8 and ACClist[&quot;2&quot;] &gt;= 0.8) \&amp;#10;    or (ACClist[&quot;0&quot;] &gt;= 0.8 and ACClist[&quot;1&quot;] &lt; 0.8 and ACClist[&quot;2&quot;] &gt;= 0.8):&amp;#10;        endExpTag = 0&amp;#10;        stLoopCtrl = 0&amp;#10;        thLoopCtrl = 1&amp;#10;        testLoopCtrl = 1&amp;#10;        testDict = test3Dict&amp;#10;        testText= &quot;Testing 3&quot;&amp;#10;    elif ACClist[&quot;0&quot;] &lt; 0.8 and ACClist[&quot;1&quot;] &lt; 0.8 and ACClist[&quot;2&quot;] &lt; 0.8:&amp;#10;        endExpTag = 1&amp;#10;        stLoopCtrl = 0&amp;#10;        thLoopCtrl = 0&amp;#10;        testLoopCtrl = 0&amp;#10;        schPresenLoop = 0&amp;#10;&amp;#10;elif (TBRcount &gt;= 4) and ((ACClist[&quot;0&quot;] &lt; 0.8 and ACClist[&quot;1&quot;] &gt;= 0.8 and \&amp;#10;ACClist[&quot;2&quot;] &gt;= 0.8 and ACClist[&quot;3&quot;] &gt;= 0.8) or (ACClist[&quot;0&quot;] &gt;= 0.8 and \&amp;#10;ACClist[&quot;1&quot;] &lt; 0.8 and ACClist[&quot;2&quot;] &gt;= 0.8 and ACClist[&quot;3&quot;] &gt;= 0.8)):&amp;#10;        endExpTag = 0&amp;#10;        stLoopCtrl = 0&amp;#10;        thLoopCtrl = 0&amp;#10;        testLoopCtrl = 0&amp;#10;        flag = 1&amp;#10;&amp;#10;elif TBRcount == 4:&amp;#10;    if (ACClist[&quot;0&quot;] &lt; 0.8 and ACClist[&quot;1&quot;] &lt; 0.8 and ACClist[&quot;2&quot;] &gt;= 0.8 and \&amp;#10;    ACClist[&quot;3&quot;] &gt;= 0.8) \&amp;#10;    or (ACClist[&quot;0&quot;] &gt;= 0.8 and ACClist[&quot;1&quot;] &lt; 0.8 and ACClist[&quot;2&quot;] &lt; 0.8 and \&amp;#10;    ACClist[&quot;3&quot;] &gt;= 0.8) \&amp;#10;    or (ACClist[&quot;0&quot;] &lt; 0.8 and ACClist[&quot;1&quot;] &gt;= 0.8 and ACClist[&quot;2&quot;] &lt; 0.8 and \&amp;#10;    ACClist[&quot;3&quot;] &gt;= 0.8):&amp;#10;        endExpTag = 0&amp;#10;        stLoopCtrl = 0&amp;#10;        thLoopCtrl = 1&amp;#10;        testLoopCtrl = 1&amp;#10;        testDict = test3Dict&amp;#10;        testText= &quot;Testing 3&quot;&amp;#10;    elif (ACClist[&quot;0&quot;] &lt; 0.8 and ACClist[&quot;1&quot;] &gt;= 0.8 and ACClist[&quot;2&quot;] &gt;= 0.8 and \&amp;#10;    ACClist[&quot;3&quot;] &lt; 0.8) \&amp;#10;    or (ACClist[&quot;0&quot;] &gt; 0.8 and ACClist[&quot;1&quot;] &lt; 0.8 and ACClist[&quot;2&quot;] &gt;= 0.8 and \&amp;#10;    ACClist[&quot;3&quot;] &lt; 0.8):&amp;#10;        endExpTag = 0&amp;#10;        stLoopCtrl = 1&amp;#10;        thLoopCtrl = 1&amp;#10;        testLoopCtrl = 1&amp;#10;        testDict = test3Dict&amp;#10;        testText= 'Testing 3'&amp;#10;    elif (ACClist[&quot;0&quot;] &gt;= 0.8 and ACClist[&quot;1&quot;] &lt; 0.8 and ACClist[&quot;2&quot;] &lt; 0.8 and \&amp;#10;    ACClist[&quot;3&quot;] &lt; 0.8) \&amp;#10;    or (ACClist[&quot;0&quot;] &lt; 0.8 and ACClist[&quot;1&quot;] &gt;= 0.8 and ACClist[&quot;2&quot;] &lt; 0.8 and \&amp;#10;    ACClist[&quot;3&quot;] &lt; 0.8) \&amp;#10;    or (ACClist[&quot;0&quot;] &lt; 0.8 and ACClist[&quot;1&quot;] &lt; 0.8 and ACClist[&quot;2&quot;] &gt;= 0.8 and \&amp;#10;    ACClist[&quot;3&quot;] &lt; 0.8):&amp;#10;        endExpTag = 1&amp;#10;        stLoopCtrl = 0&amp;#10;        thLoopCtrl = 0&amp;#10;        testLoopCtrl = 0&amp;#10;        schPresenLoop = 0&amp;#10;&amp;#10;elif TBRcount == 5 and ACClist[&quot;4&quot;] &lt; 0.8:&amp;#10;    endExpTag = 0&amp;#10;    stLoopCtrl = 0&amp;#10;    thLoopCtrl = 0&amp;#10;    testLoopCtrl = 0&amp;#10;&amp;#10;elif TBRcount == 5 and ACClist[&quot;4&quot;] &gt;= 0.8:&amp;#10;    endExpTag = 0&amp;#10;    stLoopCtrl = 0&amp;#10;    thLoopCtrl = 0&amp;#10;    testLoopCtrl = 0" valType="extendedCode"/>
        <Param name="Code Type" updates="None" val="Auto-&gt;JS" valType="str"/>
        <Param name="Each Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="Each JS Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="name" updates="None" val="TBRplus" valType="code"/>
      </CodeComponent>
    </Routine>
    <Routine name="searchHint">
      <TextComponent name="schHint">
        <Param name="color" updates="constant" val="black" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.06" valType="code"/>
        <Param name="name" updates="None" val="schHint" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="1.2" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="constant" val="Searching" valType="str"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
      </TextComponent>
      <TextComponent name="schFix">
        <Param name="color" updates="constant" val="black" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.06" valType="code"/>
        <Param name="name" updates="None" val="schFix" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="1.2" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="0.8" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="constant" val="+" valType="str"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
      </TextComponent>
    </Routine>
    <Routine name="searchTrials">
      <CodeComponent name="schIndx">
        <Param name="Before Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Before JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Routine" updates="constant" val="var _pj;&amp;#10;function _pj_snippets(container) {&amp;#10;    function in_es6(left, right) {&amp;#10;        if (((right instanceof Array) || ((typeof right) === &quot;string&quot;))) {&amp;#10;            return (right.indexOf(left) &gt; (- 1));&amp;#10;        } else {&amp;#10;            if (((right instanceof Map) || (right instanceof Set) || (right instanceof WeakMap) || (right instanceof WeakSet))) {&amp;#10;                return right.has(left);&amp;#10;            } else {&amp;#10;                return (left in right);&amp;#10;            }&amp;#10;        }&amp;#10;    }&amp;#10;    container[&quot;in_es6&quot;] = in_es6;&amp;#10;    return container;&amp;#10;}&amp;#10;_pj = {};&amp;#10;_pj_snippets(_pj);&amp;#10;schN = trialIndx.toString();&amp;#10;if (_pj.in_es6(searchDict[schN], targetList)) {&amp;#10;    schAns = &quot;z&quot;;&amp;#10;} else {&amp;#10;    schAns = &quot;m&quot;;&amp;#10;}&amp;#10;" valType="extendedCode"/>
        <Param name="Begin Routine" updates="constant" val="schN = str(trialIndx)&amp;#10;&amp;#10;if searchDict[schN] in targetList:&amp;#10;    schAns = &quot;z&quot;&amp;#10;else:&amp;#10;    schAns = &quot;m&quot;" valType="extendedCode"/>
        <Param name="Code Type" updates="None" val="Auto-&gt;JS" valType="str"/>
        <Param name="Each Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="Each JS Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="name" updates="None" val="schIndx" valType="code"/>
      </CodeComponent>
      <ImageComponent name="schImg">
        <Param name="color" updates="constant" val="$[1,1,1]" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flipHoriz" updates="constant" val="False" valType="bool"/>
        <Param name="flipVert" updates="constant" val="False" valType="bool"/>
        <Param name="image" updates="set every repeat" val="$searchDict[schN]" valType="str"/>
        <Param name="interpolate" updates="constant" val="linear" valType="str"/>
        <Param name="mask" updates="constant" val="None" valType="str"/>
        <Param name="name" updates="None" val="schImg" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="size" updates="constant" val="(0.2, 0.2)" valType="code"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="0.2" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="texture resolution" updates="constant" val="128" valType="code"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
      </ImageComponent>
      <ImageComponent name="schITI">
        <Param name="color" updates="constant" val="$[1,1,1]" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flipHoriz" updates="constant" val="False" valType="bool"/>
        <Param name="flipVert" updates="constant" val="False" valType="bool"/>
        <Param name="image" updates="constant" val="Instructions/ITI.png" valType="str"/>
        <Param name="interpolate" updates="constant" val="linear" valType="str"/>
        <Param name="mask" updates="constant" val="None" valType="str"/>
        <Param name="name" updates="None" val="schITI" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="size" updates="constant" val="(1.6, 1)" valType="code"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.2" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="1.8" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="texture resolution" updates="constant" val="128" valType="code"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
      </ImageComponent>
      <KeyboardComponent name="schResp">
        <Param name="allowedKeys" updates="constant" val="'z','m'" valType="code"/>
        <Param name="correctAns" updates="constant" val="$schAns" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="discard previous" updates="constant" val="True" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="forceEndRoutine" updates="constant" val="False" valType="bool"/>
        <Param name="name" updates="None" val="schResp" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="2.0" valType="code"/>
        <Param name="store" updates="constant" val="first key" valType="str"/>
        <Param name="storeCorrect" updates="constant" val="True" valType="bool"/>
        <Param name="syncScreenRefresh" updates="constant" val="True" valType="bool"/>
      </KeyboardComponent>
      <CodeComponent name="schCode">
        <Param name="Before Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Before JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="Code Type" updates="None" val="Auto-&gt;JS" valType="str"/>
        <Param name="Each Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="Each JS Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Routine" updates="constant" val="if (((schResp.corr === 1) &amp;&amp; (schResp.keys === &quot;z&quot;))) {&amp;#10;    ACCschSum = (ACCschSum + 1);&amp;#10;} else {&amp;#10;    if (((schResp.corr === 1) &amp;&amp; (schResp.keys === &quot;m&quot;))) {&amp;#10;        ACCrejSum = (ACCrejSum + 1);&amp;#10;    }&amp;#10;}&amp;#10;sch_loop.addData(&quot;setsize&quot;, setsize);&amp;#10;sch_loop.addData(&quot;subCategory&quot;, searchSubCate[schN]);&amp;#10;sch_loop.addData(&quot;category&quot;, searchCate[schN]);&amp;#10;sch_loop.addData(&quot;cond&quot;, cateTag);&amp;#10;sch_loop.addData(&quot;stimImg&quot;, searchDict[schN]);&amp;#10;" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="if schResp.corr == 1 and schResp.keys == &quot;z&quot;:&amp;#10;    ACCschSum = ACCschSum + 1&amp;#10;elif schResp.corr == 1 and schResp.keys == &quot;m&quot;:&amp;#10;    ACCrejSum = ACCrejSum + 1&amp;#10;&amp;#10;sch_loop.addData(&quot;setsize&quot;, setsize)&amp;#10;sch_loop.addData(&quot;subCategory&quot;, searchSubCate[schN])&amp;#10;sch_loop.addData(&quot;category&quot;, searchCate[schN])&amp;#10;sch_loop.addData(&quot;cond&quot;, cateTag)&amp;#10;sch_loop.addData(&quot;stimImg&quot;, searchDict[schN])" valType="extendedCode"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="name" updates="None" val="schCode" valType="code"/>
      </CodeComponent>
    </Routine>
    <Routine name="expStart">
      <ImageComponent name="formalExp">
        <Param name="color" updates="constant" val="$[1,1,1]" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flipHoriz" updates="constant" val="False" valType="bool"/>
        <Param name="flipVert" updates="constant" val="False" valType="bool"/>
        <Param name="image" updates="constant" val="Instructions/instr_exp.png" valType="str"/>
        <Param name="interpolate" updates="constant" val="linear" valType="str"/>
        <Param name="mask" updates="constant" val="None" valType="str"/>
        <Param name="name" updates="None" val="formalExp" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="size" updates="constant" val="(1.6, 1)" valType="code"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="texture resolution" updates="constant" val="128" valType="code"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
      </ImageComponent>
      <KeyboardComponent name="expStaResp">
        <Param name="allowedKeys" updates="constant" val="'space'" valType="code"/>
        <Param name="correctAns" updates="constant" val="" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="discard previous" updates="constant" val="True" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="forceEndRoutine" updates="constant" val="True" valType="bool"/>
        <Param name="name" updates="None" val="expStaResp" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="store" updates="constant" val="last key" valType="str"/>
        <Param name="storeCorrect" updates="constant" val="False" valType="bool"/>
        <Param name="syncScreenRefresh" updates="constant" val="True" valType="bool"/>
      </KeyboardComponent>
    </Routine>
    <Routine name="pracStart">
      <TextComponent name="pStartHint">
        <Param name="color" updates="constant" val="black" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.06" valType="code"/>
        <Param name="name" updates="None" val="pStartHint" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="1.2" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="constant" val="Practice" valType="str"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
      </TextComponent>
      <ImageComponent name="pITI">
        <Param name="color" updates="constant" val="$[1,1,1]" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flipHoriz" updates="constant" val="False" valType="bool"/>
        <Param name="flipVert" updates="constant" val="False" valType="bool"/>
        <Param name="image" updates="constant" val="Instructions/ITI.png" valType="str"/>
        <Param name="interpolate" updates="constant" val="linear" valType="str"/>
        <Param name="mask" updates="constant" val="None" valType="str"/>
        <Param name="name" updates="None" val="pITI" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="size" updates="constant" val="(1.6, 1)" valType="code"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="1.2" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="0.5" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="texture resolution" updates="constant" val="128" valType="code"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
      </ImageComponent>
    </Routine>
    <Routine name="pStudyTrials">
      <ImageComponent name="pStudyImg">
        <Param name="color" updates="constant" val="$[1,1,1]" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flipHoriz" updates="constant" val="False" valType="bool"/>
        <Param name="flipVert" updates="constant" val="False" valType="bool"/>
        <Param name="image" updates="set every repeat" val="$pTarg" valType="str"/>
        <Param name="interpolate" updates="constant" val="linear" valType="str"/>
        <Param name="mask" updates="constant" val="None" valType="str"/>
        <Param name="name" updates="None" val="pStudyImg" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="size" updates="constant" val="(0.2, 0.2)" valType="code"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="3" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="texture resolution" updates="constant" val="128" valType="code"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
      </ImageComponent>
      <ImageComponent name="pStdITI">
        <Param name="color" updates="constant" val="$[1,1,1]" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flipHoriz" updates="constant" val="False" valType="bool"/>
        <Param name="flipVert" updates="constant" val="False" valType="bool"/>
        <Param name="image" updates="constant" val="Instructions/ITI.png" valType="str"/>
        <Param name="interpolate" updates="constant" val="linear" valType="str"/>
        <Param name="mask" updates="constant" val="None" valType="str"/>
        <Param name="name" updates="None" val="pStdITI" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="size" updates="constant" val="(1.6, 1)" valType="code"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="3" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="0.95" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="texture resolution" updates="constant" val="128" valType="code"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
      </ImageComponent>
    </Routine>
    <Routine name="pStudyHint">
      <TextComponent name="psHint">
        <Param name="color" updates="constant" val="black" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.06" valType="code"/>
        <Param name="name" updates="None" val="psHint" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="1.2" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="set every repeat" val="$pmemoText" valType="str"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
      </TextComponent>
      <TextComponent name="psFix">
        <Param name="color" updates="constant" val="black" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.06" valType="code"/>
        <Param name="name" updates="None" val="psFix" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="1.2" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="0.8" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="constant" val="+" valType="str"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
      </TextComponent>
    </Routine>
    <Routine name="pTBRctrl">
      <CodeComponent name="pTBRcode">
        <Param name="Before Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Before JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Routine" updates="constant" val="pmemoText = &quot;Memorizing&quot;;&amp;#10;ptestText = &quot;Testing 1&quot;;&amp;#10;pstLoopCtrl = 1;&amp;#10;pthLoopCtrl = 1;&amp;#10;ptestLoopCtrl = 1;&amp;#10;pTBRcount = 0;&amp;#10;pACClist = {};&amp;#10;" valType="extendedCode"/>
        <Param name="Begin Routine" updates="constant" val="pmemoText = &quot;Memorizing&quot;&amp;#10;ptestText = &quot;Testing 1&quot;&amp;#10;pstLoopCtrl = 1&amp;#10;pthLoopCtrl = 1&amp;#10;ptestLoopCtrl = 1&amp;#10;pTBRcount = 0&amp;#10;pACClist = {}" valType="extendedCode"/>
        <Param name="Code Type" updates="None" val="Auto-&gt;JS" valType="str"/>
        <Param name="Each Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="Each JS Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="name" updates="None" val="pTBRcode" valType="code"/>
      </CodeComponent>
    </Routine>
    <Routine name="pTestHint">
      <TextComponent name="ptHint">
        <Param name="color" updates="constant" val="black" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.06" valType="code"/>
        <Param name="name" updates="None" val="ptHint" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="1.2" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="set every repeat" val="$ptestText" valType="str"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
      </TextComponent>
      <TextComponent name="ptFix">
        <Param name="color" updates="constant" val="black" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.06" valType="code"/>
        <Param name="name" updates="None" val="ptFix" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="1.2" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="0.8" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="constant" val="+" valType="str"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
      </TextComponent>
    </Routine>
    <Routine name="pTestTrials">
      <ImageComponent name="pTestImg">
        <Param name="color" updates="constant" val="$[1,1,1]" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flipHoriz" updates="constant" val="False" valType="bool"/>
        <Param name="flipVert" updates="constant" val="False" valType="bool"/>
        <Param name="image" updates="set every repeat" val="$ptStim" valType="str"/>
        <Param name="interpolate" updates="constant" val="linear" valType="str"/>
        <Param name="mask" updates="constant" val="None" valType="str"/>
        <Param name="name" updates="None" val="pTestImg" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="size" updates="constant" val="(0.2, 0.2)" valType="code"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="texture resolution" updates="constant" val="128" valType="code"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
      </ImageComponent>
      <KeyboardComponent name="pTestResp">
        <Param name="allowedKeys" updates="constant" val="'z','m'" valType="code"/>
        <Param name="correctAns" updates="constant" val="$pCorAns" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="discard previous" updates="constant" val="True" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="forceEndRoutine" updates="constant" val="True" valType="bool"/>
        <Param name="name" updates="None" val="pTestResp" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="store" updates="constant" val="first key" valType="str"/>
        <Param name="storeCorrect" updates="constant" val="True" valType="bool"/>
        <Param name="syncScreenRefresh" updates="constant" val="True" valType="bool"/>
      </KeyboardComponent>
    </Routine>
    <Routine name="pACCcount">
      <CodeComponent name="jdgLoop">
        <Param name="Before Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Before JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Routine" updates="constant" val="if ((ptN === 0)) {&amp;#10;    ptN = 1;&amp;#10;}&amp;#10;pACClist[pTBRcount.toString()] = (pACCsum / ptN);&amp;#10;pTBRcount = (pTBRcount + 1);&amp;#10;if ((pTBRcount === 1)) {&amp;#10;    if ((pACClist[&quot;0&quot;] &gt;= 0.8)) {&amp;#10;        pendExpTag = 0;&amp;#10;        pstLoopCtrl = 0;&amp;#10;        pthLoopCtrl = 1;&amp;#10;        ptestLoopCtrl = 1;&amp;#10;        ptestText = &quot;Testing 2&quot;;&amp;#10;    } else {&amp;#10;        if ((pACClist[&quot;0&quot;] &lt; 0.8)) {&amp;#10;            pendExpTag = 0;&amp;#10;            pstLoopCtrl = 1;&amp;#10;            pthLoopCtrl = 1;&amp;#10;            ptestLoopCtrl = 1;&amp;#10;            pmemoText = &quot;Re-Memorizing&quot;;&amp;#10;            ptestText = &quot;Testing 1&quot;;&amp;#10;        }&amp;#10;    }&amp;#10;} else {&amp;#10;    if ((((pTBRcount &gt;= 2) &amp;&amp; (pACClist[&quot;0&quot;] &gt;= 0.8)) &amp;&amp; (pACClist[&quot;1&quot;] &gt;= 0.8))) {&amp;#10;        pendExpTag = 0;&amp;#10;        pstLoopCtrl = 0;&amp;#10;        pthLoopCtrl = 0;&amp;#10;        ptestLoopCtrl = 0;&amp;#10;    } else {&amp;#10;        if ((pTBRcount === 2)) {&amp;#10;            if (((pACClist[&quot;0&quot;] &gt;= 0.8) &amp;&amp; (pACClist[&quot;1&quot;] &lt; 0.8))) {&amp;#10;                pendExpTag = 0;&amp;#10;                pstLoopCtrl = 1;&amp;#10;                pthLoopCtrl = 1;&amp;#10;                ptestLoopCtrl = 1;&amp;#10;                pmemoText = &quot;Re-Memorizing&quot;;&amp;#10;                ptestText = &quot;Testing 2&quot;;&amp;#10;            } else {&amp;#10;                if (((pACClist[&quot;0&quot;] &lt; 0.8) &amp;&amp; (pACClist[&quot;1&quot;] &gt;= 0.8))) {&amp;#10;                    pendExpTag = 0;&amp;#10;                    pstLoopCtrl = 0;&amp;#10;                    pthLoopCtrl = 1;&amp;#10;                    ptestLoopCtrl = 1;&amp;#10;                    ptestText = &quot;Testing 2&quot;;&amp;#10;                } else {&amp;#10;                    if (((pACClist[&quot;0&quot;] &lt; 0.8) &amp;&amp; (pACClist[&quot;1&quot;] &lt; 0.8))) {&amp;#10;                        pendExpTag = 0;&amp;#10;                        pstLoopCtrl = 1;&amp;#10;                        pthLoopCtrl = 1;&amp;#10;                        ptestLoopCtrl = 1;&amp;#10;                        pmemoText = &quot;Re-Memorizing&quot;;&amp;#10;                        ptestText = &quot;Testing 1&quot;;&amp;#10;                    }&amp;#10;                }&amp;#10;            }&amp;#10;        } else {&amp;#10;            if ((pTBRcount === 3)) {&amp;#10;                if (((((pACClist[&quot;0&quot;] &gt;= 0.8) &amp;&amp; (pACClist[&quot;1&quot;] &lt; 0.8)) &amp;&amp; (pACClist[&quot;2&quot;] &lt; 0.8)) || (((pACClist[&quot;0&quot;] &lt; 0.8) &amp;&amp; (pACClist[&quot;1&quot;] &gt;= 0.8)) &amp;&amp; (pACClist[&quot;2&quot;] &lt; 0.8)))) {&amp;#10;                    pendExpTag = 0;&amp;#10;                    pstLoopCtrl = 1;&amp;#10;                    pthLoopCtrl = 1;&amp;#10;                    ptestLoopCtrl = 1;&amp;#10;                    ptestText = &quot;Testing 2&quot;;&amp;#10;                } else {&amp;#10;                    if ((((pACClist[&quot;0&quot;] &lt; 0.8) &amp;&amp; (pACClist[&quot;1&quot;] &lt; 0.8)) &amp;&amp; (pACClist[&quot;2&quot;] &gt;= 0.8))) {&amp;#10;                        pendExpTag = 0;&amp;#10;                        pstLoopCtrl = 0;&amp;#10;                        pthLoopCtrl = 1;&amp;#10;                        ptestLoopCtrl = 1;&amp;#10;                        ptestText = &quot;Testing 2&quot;;&amp;#10;                    } else {&amp;#10;                        if (((((pACClist[&quot;0&quot;] &lt; 0.8) &amp;&amp; (pACClist[&quot;1&quot;] &gt;= 0.8)) &amp;&amp; (pACClist[&quot;2&quot;] &gt;= 0.8)) || (((pACClist[&quot;0&quot;] &gt;= 0.8) &amp;&amp; (pACClist[&quot;1&quot;] &lt; 0.8)) &amp;&amp; (pACClist[&quot;2&quot;] &gt;= 0.8)))) {&amp;#10;                            pendExpTag = 0;&amp;#10;                            pstLoopCtrl = 0;&amp;#10;                            pthLoopCtrl = 1;&amp;#10;                            ptestLoopCtrl = 1;&amp;#10;                            ptestText = &quot;Testing 3&quot;;&amp;#10;                        } else {&amp;#10;                            if ((((pACClist[&quot;0&quot;] &lt; 0.8) &amp;&amp; (pACClist[&quot;1&quot;] &lt; 0.8)) &amp;&amp; (pACClist[&quot;2&quot;] &lt; 0.8))) {&amp;#10;                                pendExpTag = 1;&amp;#10;                                pstLoopCtrl = 0;&amp;#10;                                pthLoopCtrl = 0;&amp;#10;                                ptestLoopCtrl = 0;&amp;#10;                            }&amp;#10;                        }&amp;#10;                    }&amp;#10;                }&amp;#10;            } else {&amp;#10;                if (((pTBRcount &gt;= 4) &amp;&amp; (((((pACClist[&quot;0&quot;] &lt; 0.8) &amp;&amp; (pACClist[&quot;1&quot;] &gt;= 0.8)) &amp;&amp; (pACClist[&quot;2&quot;] &gt;= 0.8)) &amp;&amp; (pACClist[&quot;3&quot;] &gt;= 0.8)) || ((((pACClist[&quot;0&quot;] &gt;= 0.8) &amp;&amp; (pACClist[&quot;1&quot;] &lt; 0.8)) &amp;&amp; (pACClist[&quot;2&quot;] &gt;= 0.8)) &amp;&amp; (pACClist[&quot;3&quot;] &gt;= 0.8))))) {&amp;#10;                    pendExpTag = 0;&amp;#10;                    pstLoopCtrl = 0;&amp;#10;                    pthLoopCtrl = 0;&amp;#10;                    ptestLoopCtrl = 0;&amp;#10;                } else {&amp;#10;                    if ((pTBRcount === 4)) {&amp;#10;                        if (((((((pACClist[&quot;0&quot;] &lt; 0.8) &amp;&amp; (pACClist[&quot;1&quot;] &lt; 0.8)) &amp;&amp; (pACClist[&quot;2&quot;] &gt;= 0.8)) &amp;&amp; (pACClist[&quot;3&quot;] &gt;= 0.8)) || ((((pACClist[&quot;0&quot;] &gt;= 0.8) &amp;&amp; (pACClist[&quot;1&quot;] &lt; 0.8)) &amp;&amp; (pACClist[&quot;2&quot;] &lt; 0.8)) &amp;&amp; (pACClist[&quot;3&quot;] &gt;= 0.8))) || ((((pACClist[&quot;0&quot;] &lt; 0.8) &amp;&amp; (pACClist[&quot;1&quot;] &gt;= 0.8)) &amp;&amp; (pACClist[&quot;2&quot;] &lt; 0.8)) &amp;&amp; (pACClist[&quot;3&quot;] &gt;= 0.8)))) {&amp;#10;                            pendExpTag = 0;&amp;#10;                            pstLoopCtrl = 0;&amp;#10;                            pthLoopCtrl = 1;&amp;#10;                            ptestLoopCtrl = 1;&amp;#10;                            ptestText = &quot;Testing 3&quot;;&amp;#10;                        } else {&amp;#10;                            if ((((((pACClist[&quot;0&quot;] &lt; 0.8) &amp;&amp; (pACClist[&quot;1&quot;] &gt;= 0.8)) &amp;&amp; (pACClist[&quot;2&quot;] &gt;= 0.8)) &amp;&amp; (pACClist[&quot;3&quot;] &lt; 0.8)) || ((((pACClist[&quot;0&quot;] &gt; 0.8) &amp;&amp; (pACClist[&quot;1&quot;] &lt; 0.8)) &amp;&amp; (pACClist[&quot;2&quot;] &gt;= 0.8)) &amp;&amp; (pACClist[&quot;3&quot;] &lt; 0.8)))) {&amp;#10;                                pendExpTag = 0;&amp;#10;                                pstLoopCtrl = 1;&amp;#10;                                pthLoopCtrl = 1;&amp;#10;                                ptestLoopCtrl = 1;&amp;#10;                                ptestText = &quot;Testing 3&quot;;&amp;#10;                            } else {&amp;#10;                                if (((((((pACClist[&quot;0&quot;] &gt;= 0.8) &amp;&amp; (pACClist[&quot;1&quot;] &lt; 0.8)) &amp;&amp; (pACClist[&quot;2&quot;] &lt; 0.8)) &amp;&amp; (pACClist[&quot;3&quot;] &lt; 0.8)) || ((((pACClist[&quot;0&quot;] &lt; 0.8) &amp;&amp; (pACClist[&quot;1&quot;] &gt;= 0.8)) &amp;&amp; (pACClist[&quot;2&quot;] &lt; 0.8)) &amp;&amp; (pACClist[&quot;3&quot;] &lt; 0.8))) || ((((pACClist[&quot;0&quot;] &lt; 0.8) &amp;&amp; (pACClist[&quot;1&quot;] &lt; 0.8)) &amp;&amp; (pACClist[&quot;2&quot;] &gt;= 0.8)) &amp;&amp; (pACClist[&quot;3&quot;] &lt; 0.8)))) {&amp;#10;                                    pendExpTag = 1;&amp;#10;                                    pstLoopCtrl = 0;&amp;#10;                                    pthLoopCtrl = 0;&amp;#10;                                    ptestLoopCtrl = 0;&amp;#10;                                }&amp;#10;                            }&amp;#10;                        }&amp;#10;                    } else {&amp;#10;                        if (((pTBRcount === 5) &amp;&amp; (pACClist[&quot;4&quot;] &lt; 0.8))) {&amp;#10;                            pendExpTag = 0;&amp;#10;                            pstLoopCtrl = 0;&amp;#10;                            pthLoopCtrl = 0;&amp;#10;                            ptestLoopCtrl = 0;&amp;#10;                        } else {&amp;#10;                            if (((pTBRcount === 5) &amp;&amp; (pACClist[&quot;4&quot;] &gt;= 0.8))) {&amp;#10;                                pendExpTag = 0;&amp;#10;                                pstLoopCtrl = 0;&amp;#10;                                pthLoopCtrl = 0;&amp;#10;                                ptestLoopCtrl = 0;&amp;#10;                            }&amp;#10;                        }&amp;#10;                    }&amp;#10;                }&amp;#10;            }&amp;#10;        }&amp;#10;    }&amp;#10;}&amp;#10;" valType="extendedCode"/>
        <Param name="Begin Routine" updates="constant" val="if ptN == 0:&amp;#10;    ptN = 1&amp;#10;&amp;#10;pACClist[str(pTBRcount)] = pACCsum/ptN&amp;#10;pTBRcount = pTBRcount + 1&amp;#10;&amp;#10;if pTBRcount == 1:&amp;#10;    if pACClist[&quot;0&quot;] &gt;= 0.8:&amp;#10;        pendExpTag = 0&amp;#10;        pstLoopCtrl = 0&amp;#10;        pthLoopCtrl = 1&amp;#10;        ptestLoopCtrl = 1&amp;#10;        ptestText = &quot;Testing 2&quot;&amp;#10;    elif pACClist[&quot;0&quot;] &lt; 0.8:&amp;#10;        pendExpTag = 0&amp;#10;        pstLoopCtrl = 1&amp;#10;        pthLoopCtrl = 1&amp;#10;        ptestLoopCtrl = 1&amp;#10;        pmemoText = &quot;Re-Memorizing&quot;&amp;#10;        ptestText = &quot;Testing 1&quot;&amp;#10;&amp;#10;elif (pTBRcount &gt;= 2) and (pACClist[&quot;0&quot;] &gt;= 0.8) and (pACClist[&quot;1&quot;] &gt;= 0.8):&amp;#10;        pendExpTag = 0&amp;#10;        pstLoopCtrl = 0&amp;#10;        pthLoopCtrl = 0&amp;#10;        ptestLoopCtrl = 0&amp;#10;&amp;#10;elif pTBRcount == 2:&amp;#10;    if (pACClist[&quot;0&quot;] &gt;= 0.8) and (pACClist[&quot;1&quot;] &lt; 0.8):&amp;#10;        pendExpTag = 0&amp;#10;        pstLoopCtrl = 1&amp;#10;        pthLoopCtrl = 1&amp;#10;        ptestLoopCtrl = 1&amp;#10;        pmemoText = &quot;Re-Memorizing&quot;&amp;#10;        ptestText = &quot;Testing 2&quot;&amp;#10;    elif (pACClist[&quot;0&quot;] &lt; 0.8) and (pACClist[&quot;1&quot;] &gt;= 0.8):&amp;#10;        pendExpTag = 0&amp;#10;        pstLoopCtrl = 0&amp;#10;        pthLoopCtrl = 1&amp;#10;        ptestLoopCtrl = 1&amp;#10;        ptestText = &quot;Testing 2&quot;&amp;#10;    elif (pACClist[&quot;0&quot;] &lt; 0.8) and (pACClist[&quot;1&quot;] &lt; 0.8):&amp;#10;        pendExpTag = 0&amp;#10;        pstLoopCtrl = 1&amp;#10;        pthLoopCtrl = 1&amp;#10;        ptestLoopCtrl = 1&amp;#10;        pmemoText = &quot;Re-Memorizing&quot;&amp;#10;        ptestText = &quot;Testing 1&quot;&amp;#10;&amp;#10;elif pTBRcount == 3:&amp;#10;    if ((pACClist[&quot;0&quot;] &gt;= 0.8) and (pACClist[&quot;1&quot;] &lt; 0.8) and \&amp;#10;    (pACClist[&quot;2&quot;] &lt; 0.8)) \&amp;#10;    or ((pACClist[&quot;0&quot;] &lt; 0.8) and (pACClist[&quot;1&quot;] &gt;= 0.8) and \&amp;#10;    (pACClist[&quot;2&quot;] &lt; 0.8)):&amp;#10;        pendExpTag = 0&amp;#10;        pstLoopCtrl = 1&amp;#10;        pthLoopCtrl = 1&amp;#10;        ptestLoopCtrl = 1&amp;#10;        ptestText = &quot;Testing 2&quot;&amp;#10;    elif (pACClist[&quot;0&quot;] &lt; 0.8) and (pACClist[&quot;1&quot;] &lt; 0.8) and \&amp;#10;    (pACClist[&quot;2&quot;] &gt;= 0.8):&amp;#10;        pendExpTag = 0&amp;#10;        pstLoopCtrl = 0&amp;#10;        pthLoopCtrl = 1&amp;#10;        ptestLoopCtrl = 1&amp;#10;        ptestText = &quot;Testing 2&quot;&amp;#10;    elif ((pACClist[&quot;0&quot;] &lt; 0.8) and (pACClist[&quot;1&quot;] &gt;= 0.8) and \&amp;#10;    (pACClist[&quot;2&quot;] &gt;= 0.8)) \&amp;#10;    or ((pACClist[&quot;0&quot;] &gt;= 0.8) and (pACClist[&quot;1&quot;] &lt; 0.8) and \&amp;#10;    (pACClist[&quot;2&quot;] &gt;= 0.8)):&amp;#10;        pendExpTag = 0&amp;#10;        pstLoopCtrl = 0&amp;#10;        pthLoopCtrl = 1&amp;#10;        ptestLoopCtrl = 1&amp;#10;        ptestText = &quot;Testing 3&quot;&amp;#10;    elif (pACClist[&quot;0&quot;] &lt; 0.8) and (pACClist[&quot;1&quot;] &lt; 0.8) and \&amp;#10;    (pACClist[&quot;2&quot;] &lt; 0.8):&amp;#10;        pendExpTag = 1&amp;#10;        pstLoopCtrl = 0&amp;#10;        pthLoopCtrl = 0&amp;#10;        ptestLoopCtrl = 0&amp;#10;&amp;#10;elif (pTBRcount &gt;= 4) and ((pACClist[&quot;0&quot;] &lt; 0.8 and pACClist[&quot;1&quot;] &gt;= 0.8 and \&amp;#10;pACClist[&quot;2&quot;] &gt;= 0.8 and pACClist[&quot;3&quot;] &gt;= 0.8) or (pACClist[&quot;0&quot;] &gt;= 0.8 and \&amp;#10;pACClist[&quot;1&quot;] &lt; 0.8 and pACClist[&quot;2&quot;] &gt;= 0.8 and pACClist[&quot;3&quot;] &gt;= 0.8)):&amp;#10;        pendExpTag = 0&amp;#10;        pstLoopCtrl = 0&amp;#10;        pthLoopCtrl = 0&amp;#10;        ptestLoopCtrl = 0&amp;#10;&amp;#10;elif pTBRcount == 4:&amp;#10;    if (pACClist[&quot;0&quot;] &lt; 0.8 and pACClist[&quot;1&quot;] &lt; 0.8 and \&amp;#10;    pACClist[&quot;2&quot;] &gt;= 0.8 and pACClist[&quot;3&quot;] &gt;= 0.8) \&amp;#10;    or (pACClist[&quot;0&quot;] &gt;= 0.8 and pACClist[&quot;1&quot;] &lt; 0.8 and \&amp;#10;    pACClist[&quot;2&quot;] &lt; 0.8 and pACClist[&quot;3&quot;] &gt;= 0.8) \&amp;#10;    or (pACClist[&quot;0&quot;] &lt; 0.8 and pACClist[&quot;1&quot;] &gt;= 0.8 and \&amp;#10;    pACClist[&quot;2&quot;] &lt; 0.8 and pACClist[&quot;3&quot;] &gt;= 0.8):&amp;#10;        pendExpTag = 0&amp;#10;        pstLoopCtrl = 0&amp;#10;        pthLoopCtrl = 1&amp;#10;        ptestLoopCtrl = 1&amp;#10;        ptestText = &quot;Testing 3&quot;&amp;#10;    elif (pACClist[&quot;0&quot;] &lt; 0.8 and pACClist[&quot;1&quot;] &gt;= 0.8 and \&amp;#10;    pACClist[&quot;2&quot;] &gt;= 0.8 and pACClist[&quot;3&quot;] &lt; 0.8) \&amp;#10;    or (pACClist[&quot;0&quot;] &gt; 0.8 and pACClist[&quot;1&quot;] &lt; 0.8 and \&amp;#10;    pACClist[&quot;2&quot;] &gt;= 0.8 and pACClist[&quot;3&quot;] &lt; 0.8):&amp;#10;        pendExpTag = 0&amp;#10;        pstLoopCtrl = 1&amp;#10;        pthLoopCtrl = 1&amp;#10;        ptestLoopCtrl = 1&amp;#10;        ptestText = &quot;Testing 3&quot;&amp;#10;    elif (pACClist[&quot;0&quot;] &gt;= 0.8 and pACClist[&quot;1&quot;] &lt; 0.8 and \&amp;#10;    pACClist[&quot;2&quot;] &lt; 0.8 and pACClist[&quot;3&quot;] &lt; 0.8) \&amp;#10;    or (pACClist[&quot;0&quot;] &lt; 0.8 and pACClist[&quot;1&quot;] &gt;= 0.8 and \&amp;#10;    pACClist[&quot;2&quot;] &lt; 0.8 and pACClist[&quot;3&quot;] &lt; 0.8) \&amp;#10;    or (pACClist[&quot;0&quot;] &lt; 0.8 and pACClist[&quot;1&quot;] &lt; 0.8 and \&amp;#10;    pACClist[&quot;2&quot;] &gt;= 0.8 and pACClist[&quot;3&quot;] &lt; 0.8):&amp;#10;        pendExpTag = 1&amp;#10;        pstLoopCtrl = 0&amp;#10;        pthLoopCtrl = 0&amp;#10;        ptestLoopCtrl = 0&amp;#10;&amp;#10;elif pTBRcount == 5 and pACClist[&quot;4&quot;] &lt; 0.8:&amp;#10;    pendExpTag = 0&amp;#10;    pstLoopCtrl = 0&amp;#10;    pthLoopCtrl = 0&amp;#10;    ptestLoopCtrl = 0&amp;#10;&amp;#10;elif pTBRcount == 5 and pACClist[&quot;4&quot;] &gt;= 0.8:&amp;#10;    pendExpTag = 0&amp;#10;    pstLoopCtrl = 0&amp;#10;    pthLoopCtrl = 0&amp;#10;    ptestLoopCtrl = 0" valType="extendedCode"/>
        <Param name="Code Type" updates="None" val="Auto-&gt;JS" valType="str"/>
        <Param name="Each Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="Each JS Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="name" updates="None" val="jdgLoop" valType="code"/>
      </CodeComponent>
    </Routine>
    <Routine name="jdgTestFile">
      <CodeComponent name="jdgFileCode">
        <Param name="Before Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Before JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Routine" updates="constant" val="if ((pTBRcount === 0)) {&amp;#10;    pTestFile = pTest1;&amp;#10;} else {&amp;#10;    if ((pTBRcount === 1)) {&amp;#10;        pTestFile = pTest2;&amp;#10;    } else {&amp;#10;        if ((pTBRcount === 3)) {&amp;#10;            pTestFile = pTest3;&amp;#10;        }&amp;#10;    }&amp;#10;}&amp;#10;pACCsum = 0;&amp;#10;ptN = 0;&amp;#10;" valType="extendedCode"/>
        <Param name="Begin Routine" updates="constant" val="if pTBRcount == 0:&amp;#10;    pTestFile = pTest1&amp;#10;elif pTBRcount == 1:&amp;#10;    pTestFile = pTest2&amp;#10;elif pTBRcount == 3:&amp;#10;    pTestFile = pTest3&amp;#10;&amp;#10;pACCsum = 0&amp;#10;ptN = 0" valType="extendedCode"/>
        <Param name="Code Type" updates="None" val="Auto-&gt;JS" valType="str"/>
        <Param name="Each Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="Each JS Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="name" updates="None" val="jdgFileCode" valType="code"/>
      </CodeComponent>
    </Routine>
    <Routine name="pSearchHint">
      <CodeComponent name="pACCbegin">
        <Param name="Before Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Before JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Routine" updates="constant" val="pACCschSum = 0;&amp;#10;pACCschSumR = 0;&amp;#10;" valType="extendedCode"/>
        <Param name="Begin Routine" updates="constant" val="pACCschSum = 0&amp;#10;pACCschSumR = 0" valType="extendedCode"/>
        <Param name="Code Type" updates="None" val="Auto-&gt;JS" valType="str"/>
        <Param name="Each Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="Each JS Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="name" updates="None" val="pACCbegin" valType="code"/>
      </CodeComponent>
      <TextComponent name="sHint">
        <Param name="color" updates="constant" val="black" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.06" valType="code"/>
        <Param name="name" updates="None" val="sHint" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="1.2" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="constant" val="Searching" valType="str"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
      </TextComponent>
      <TextComponent name="sFix">
        <Param name="color" updates="constant" val="black" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.06" valType="code"/>
        <Param name="name" updates="None" val="sFix" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="1.2" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="0.8" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="constant" val="+" valType="str"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
      </TextComponent>
    </Routine>
    <Routine name="pSearchTrials">
      <ImageComponent name="psImg">
        <Param name="color" updates="constant" val="$[1,1,1]" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flipHoriz" updates="constant" val="False" valType="bool"/>
        <Param name="flipVert" updates="constant" val="False" valType="bool"/>
        <Param name="image" updates="set every repeat" val="$pStim" valType="str"/>
        <Param name="interpolate" updates="constant" val="linear" valType="str"/>
        <Param name="mask" updates="constant" val="None" valType="str"/>
        <Param name="name" updates="None" val="psImg" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="size" updates="constant" val="(0.2, 0.2)" valType="code"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="0.2" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="texture resolution" updates="constant" val="128" valType="code"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
      </ImageComponent>
      <ImageComponent name="psITI">
        <Param name="color" updates="constant" val="$[1,1,1]" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flipHoriz" updates="constant" val="False" valType="bool"/>
        <Param name="flipVert" updates="constant" val="False" valType="bool"/>
        <Param name="image" updates="constant" val="Instructions/ITI.png" valType="str"/>
        <Param name="interpolate" updates="constant" val="linear" valType="str"/>
        <Param name="mask" updates="constant" val="None" valType="str"/>
        <Param name="name" updates="None" val="psITI" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="size" updates="constant" val="(1.6, 1)" valType="code"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.2" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="1.8" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="texture resolution" updates="constant" val="128" valType="code"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
      </ImageComponent>
      <KeyboardComponent name="psResp">
        <Param name="allowedKeys" updates="constant" val="'z','m'" valType="code"/>
        <Param name="correctAns" updates="constant" val="$pCorAns" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="discard previous" updates="constant" val="True" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="forceEndRoutine" updates="constant" val="False" valType="bool"/>
        <Param name="name" updates="None" val="psResp" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="2" valType="code"/>
        <Param name="store" updates="constant" val="first key" valType="str"/>
        <Param name="storeCorrect" updates="constant" val="True" valType="bool"/>
        <Param name="syncScreenRefresh" updates="constant" val="True" valType="bool"/>
      </KeyboardComponent>
      <CodeComponent name="pACCplus">
        <Param name="Before Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Before JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="Code Type" updates="None" val="Auto-&gt;JS" valType="str"/>
        <Param name="Each Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="Each JS Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Routine" updates="constant" val="if (((psResp.corr === 1) &amp;&amp; (psResp.keys === &quot;z&quot;))) {&amp;#10;    pACCschSum = (pACCschSum + 1);&amp;#10;} else {&amp;#10;    if (((psResp.corr === 1) &amp;&amp; (psResp.keys === &quot;m&quot;))) {&amp;#10;        pACCschSumR = (pACCschSumR + 1);&amp;#10;    }&amp;#10;}&amp;#10;" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="if (psResp.corr == 1) and (psResp.keys == &quot;z&quot;):&amp;#10;    pACCschSum = pACCschSum + 1&amp;#10;elif (psResp.corr == 1) and (psResp.keys == &quot;m&quot;):&amp;#10;    pACCschSumR = pACCschSumR + 1" valType="extendedCode"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="name" updates="None" val="pACCplus" valType="code"/>
      </CodeComponent>
    </Routine>
    <Routine name="endHint">
      <ImageComponent name="endHintImg">
        <Param name="color" updates="constant" val="$[1,1,1]" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flipHoriz" updates="constant" val="False" valType="bool"/>
        <Param name="flipVert" updates="constant" val="False" valType="bool"/>
        <Param name="image" updates="constant" val="Instructions/endHint.png" valType="str"/>
        <Param name="interpolate" updates="constant" val="linear" valType="str"/>
        <Param name="mask" updates="constant" val="None" valType="str"/>
        <Param name="name" updates="None" val="endHintImg" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="size" updates="constant" val="(1.6, 1)" valType="code"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="texture resolution" updates="constant" val="128" valType="code"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
      </ImageComponent>
      <KeyboardComponent name="endConResp">
        <Param name="allowedKeys" updates="constant" val="'space'" valType="code"/>
        <Param name="correctAns" updates="constant" val="" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="discard previous" updates="constant" val="True" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="forceEndRoutine" updates="constant" val="True" valType="bool"/>
        <Param name="name" updates="None" val="endConResp" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="store" updates="constant" val="last key" valType="str"/>
        <Param name="storeCorrect" updates="constant" val="False" valType="bool"/>
        <Param name="syncScreenRefresh" updates="constant" val="True" valType="bool"/>
      </KeyboardComponent>
      <CodeComponent name="endHintReset">
        <Param name="Before Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Before JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="Code Type" updates="None" val="Auto-&gt;JS" valType="str"/>
        <Param name="Each Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="Each JS Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Routine" updates="constant" val="endHintTag = 0;&amp;#10;" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="endHintTag = 0" valType="extendedCode"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="name" updates="None" val="endHintReset" valType="code"/>
      </CodeComponent>
    </Routine>
    <Routine name="pTextITI">
      <CodeComponent name="pjdgACCtest">
        <Param name="Before Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Before JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Routine" updates="constant" val="if ((pTestResp.corr === 1)) {&amp;#10;    pfbkText = &quot;Correct!&quot;;&amp;#10;    pclr = &quot;green&quot;;&amp;#10;} else {&amp;#10;    pfbkText = &quot;Wrong!&quot;;&amp;#10;    pclr = &quot;red&quot;;&amp;#10;}&amp;#10;" valType="extendedCode"/>
        <Param name="Begin Routine" updates="constant" val="if pTestResp.corr == 1:&amp;#10;    pfbkText = &quot;Correct!&quot;&amp;#10;    pclr = &quot;green&quot;&amp;#10;else:&amp;#10;    pfbkText = &quot;Wrong!&quot;&amp;#10;    pclr = &quot;red&quot;" valType="extendedCode"/>
        <Param name="Code Type" updates="None" val="Auto-&gt;JS" valType="str"/>
        <Param name="Each Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="Each JS Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="name" updates="None" val="pjdgACCtest" valType="code"/>
      </CodeComponent>
      <TextComponent name="pfbkTest">
        <Param name="color" updates="set every repeat" val="$pclr" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.05" valType="code"/>
        <Param name="name" updates="None" val="pfbkTest" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="0.6" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="set every repeat" val="$pfbkText" valType="str"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
      </TextComponent>
      <ImageComponent name="pTestITI">
        <Param name="color" updates="constant" val="$[1,1,1]" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flipHoriz" updates="constant" val="False" valType="bool"/>
        <Param name="flipVert" updates="constant" val="False" valType="bool"/>
        <Param name="image" updates="constant" val="Instructions/ITI.png" valType="str"/>
        <Param name="interpolate" updates="constant" val="linear" valType="str"/>
        <Param name="mask" updates="constant" val="None" valType="str"/>
        <Param name="name" updates="None" val="pTestITI" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="size" updates="constant" val="(1.6, 1)" valType="code"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.6" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="0.5" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="texture resolution" updates="constant" val="128" valType="code"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
      </ImageComponent>
      <CodeComponent name="ptACCplus">
        <Param name="Before Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Before JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="Code Type" updates="None" val="Auto-&gt;JS" valType="str"/>
        <Param name="Each Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="Each JS Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Routine" updates="constant" val="pACCsum = (pACCsum + pTestResp.corr);&amp;#10;ptN = (ptN + 1);&amp;#10;" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="pACCsum = pACCsum + pTestResp.corr&amp;#10;ptN = ptN + 1" valType="extendedCode"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="name" updates="None" val="ptACCplus" valType="code"/>
      </CodeComponent>
    </Routine>
    <Routine name="inBothDistr">
      <CodeComponent name="chooseDistr">
        <Param name="Before Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Before JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Routine" updates="constant" val="searchDict[distrCount.toString()] = targDistrDictAll[distrIndx.toString()];&amp;#10;searchCate[distrCount.toString()] = cateTag;&amp;#10;searchSubCate[distrCount.toString()] = subCateTD[distrIndx.toString()];&amp;#10;oldList = (oldList + [targDistrDictAll[distrIndx.toString()]]);&amp;#10;searchDict[altDistrCount.toString()] = altDistrDictAll[distrIndx.toString()];&amp;#10;searchCate[altDistrCount.toString()] = altCateTag;&amp;#10;searchSubCate[altDistrCount.toString()] = subCateD[distrIndx.toString()];&amp;#10;oldList = (oldList + [altDistrDictAll[distrIndx.toString()]]);&amp;#10;distrCount = (distrCount + 1);&amp;#10;altDistrCount = (altDistrCount + 1);&amp;#10;" valType="extendedCode"/>
        <Param name="Begin Routine" updates="constant" val="searchDict[str(distrCount)] = targDistrDictAll[str(distrIndx)]&amp;#10;searchCate[str(distrCount)] = cateTag&amp;#10;searchSubCate[str(distrCount)] = subCateTD[str(distrIndx)]&amp;#10;oldList = oldList + [targDistrDictAll[str(distrIndx)]]&amp;#10;&amp;#10;searchDict[str(altDistrCount)] = altDistrDictAll[str(distrIndx)]&amp;#10;searchCate[str(altDistrCount)] = altCateTag&amp;#10;searchSubCate[str(altDistrCount)] = subCateD[str(distrIndx)]&amp;#10;oldList = oldList + [altDistrDictAll[str(distrIndx)]]&amp;#10;&amp;#10;distrCount = distrCount + 1&amp;#10;altDistrCount = altDistrCount + 1" valType="extendedCode"/>
        <Param name="Code Type" updates="None" val="Auto-&gt;JS" valType="str"/>
        <Param name="Each Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="Each JS Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="name" updates="None" val="chooseDistr" valType="code"/>
      </CodeComponent>
    </Routine>
    <Routine name="inAltDistr">
      <CodeComponent name="inAltDistrCode">
        <Param name="Before Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Before JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Routine" updates="constant" val="var _pj;&amp;#10;function _pj_snippets(container) {&amp;#10;    function in_es6(left, right) {&amp;#10;        if (((right instanceof Array) || ((typeof right) === &quot;string&quot;))) {&amp;#10;            return (right.indexOf(left) &gt; (- 1));&amp;#10;        } else {&amp;#10;            if (((right instanceof Map) || (right instanceof Set) || (right instanceof WeakMap) || (right instanceof WeakSet))) {&amp;#10;                return right.has(left);&amp;#10;            } else {&amp;#10;                return (left in right);&amp;#10;            }&amp;#10;        }&amp;#10;    }&amp;#10;    container[&quot;in_es6&quot;] = in_es6;&amp;#10;    return container;&amp;#10;}&amp;#10;_pj = {};&amp;#10;_pj_snippets(_pj);&amp;#10;if ((((! _pj.in_es6(stimulus, oldList)) &amp;&amp; (stCount === 0)) &amp;&amp; (dAllCount &lt; 24))) {&amp;#10;    altDistrDictAll[dAllCount.toString()] = stimulus;&amp;#10;    subCateD[dAllCount.toString()] = subCate;&amp;#10;    dAllCount = (dAllCount + 1);&amp;#10;    stCount = (stCount + 1);&amp;#10;}&amp;#10;" valType="extendedCode"/>
        <Param name="Begin Routine" updates="constant" val="if (stimulus not in oldList) and (stCount == 0) and (dAllCount &lt; 24):&amp;#10;    altDistrDictAll[str(dAllCount)] = stimulus&amp;#10;    subCateD[str(dAllCount)] = subCate&amp;#10;    dAllCount = dAllCount + 1&amp;#10;    stCount = stCount + 1" valType="extendedCode"/>
        <Param name="Code Type" updates="None" val="Auto-&gt;JS" valType="str"/>
        <Param name="Each Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="Each JS Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="name" updates="None" val="inAltDistrCode" valType="code"/>
      </CodeComponent>
    </Routine>
    <Routine name="altStimCountBegin">
      <CodeComponent name="stCountBegin">
        <Param name="Before Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Before JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Routine" updates="constant" val="stCount = 0;&amp;#10;" valType="extendedCode"/>
        <Param name="Begin Routine" updates="constant" val="stCount = 0" valType="extendedCode"/>
        <Param name="Code Type" updates="None" val="Auto-&gt;JS" valType="str"/>
        <Param name="Each Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="Each JS Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="name" updates="None" val="stCountBegin" valType="code"/>
      </CodeComponent>
    </Routine>
    <Routine name="schACCpresen">
      <CodeComponent name="ACCresult">
        <Param name="Before Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Before JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Routine" updates="constant" val="ACCsch = ((ACCschSum / targetN) * 100);&amp;#10;ACCschStr = ACCsch.toString();&amp;#10;ACCstr = &quot;&quot;;&amp;#10;if ((ACCschStr.length &gt; 5)) {&amp;#10;    for (var aN = 0, _pj_a = 5; (aN &lt; _pj_a); aN += 1) {&amp;#10;        ACCstr = (ACCstr + ACCschStr[aN]);&amp;#10;    }&amp;#10;} else {&amp;#10;    for (var aN = 0, _pj_a = ACCschStr.length; (aN &lt; _pj_a); aN += 1) {&amp;#10;        ACCstr = (ACCstr + ACCschStr[aN]);&amp;#10;    }&amp;#10;}&amp;#10;ACCtext1 = ((&quot;You detected &quot; + ACCstr) + &quot;% of the targets&quot;);&amp;#10;ACCschR = ((ACCrejSum / (distrN * 2)) * 100);&amp;#10;ACCschStrR = ACCschR.toString();&amp;#10;ACCstrR = &quot;&quot;;&amp;#10;if ((ACCschStrR.length &gt; 5)) {&amp;#10;    for (var aN = 0, _pj_a = 5; (aN &lt; _pj_a); aN += 1) {&amp;#10;        ACCstrR = (ACCstrR + ACCschStrR[aN]);&amp;#10;    }&amp;#10;} else {&amp;#10;    for (var aN = 0, _pj_a = ACCschStrR.length; (aN &lt; _pj_a); aN += 1) {&amp;#10;        ACCstrR = (ACCstrR + ACCschStrR[aN]);&amp;#10;    }&amp;#10;}&amp;#10;ACCtext2 = ((&quot;You rejected &quot; + ACCstrR) + &quot;% of the distractors&quot;);&amp;#10;" valType="extendedCode"/>
        <Param name="Begin Routine" updates="constant" val="ACCsch = (ACCschSum/targetN)*100&amp;#10;ACCschStr = str(ACCsch)&amp;#10;ACCstr = &quot;&quot;&amp;#10;if len(ACCschStr) &gt; 5:&amp;#10;    for aN in range(5):&amp;#10;        ACCstr = ACCstr + ACCschStr[aN]&amp;#10;else:&amp;#10;    for aN in range(len(ACCschStr)):&amp;#10;        ACCstr = ACCstr + ACCschStr[aN]&amp;#10;&amp;#10;ACCtext1 = &quot;You detected &quot;+ACCstr+&quot;% of the targets&quot;&amp;#10;&amp;#10;ACCschR = (ACCrejSum/(distrN*2))*100&amp;#10;ACCschStrR = str(ACCschR)&amp;#10;ACCstrR = &quot;&quot;&amp;#10;if len(ACCschStrR) &gt; 5:&amp;#10;    for aN in range(5):&amp;#10;        ACCstrR = ACCstrR + ACCschStrR[aN]&amp;#10;else:&amp;#10;    for aN in range(len(ACCschStrR)):&amp;#10;        ACCstrR = ACCstrR + ACCschStrR[aN]&amp;#10;&amp;#10;ACCtext2 = &quot;You rejected &quot;+ACCstrR+&quot;% of the distractors&quot;" valType="extendedCode"/>
        <Param name="Code Type" updates="None" val="Auto-&gt;JS" valType="str"/>
        <Param name="Each Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="Each JS Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="name" updates="None" val="ACCresult" valType="code"/>
      </CodeComponent>
      <TextComponent name="ACCpresen1">
        <Param name="color" updates="constant" val="black" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.05" valType="code"/>
        <Param name="name" updates="None" val="ACCpresen1" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0.2)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="300" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="set every repeat" val="$ACCtext1" valType="str"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
      </TextComponent>
      <TextComponent name="ACCpresen2">
        <Param name="color" updates="constant" val="black" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.05" valType="code"/>
        <Param name="name" updates="None" val="ACCpresen2" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0.1)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="300" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="set every repeat" val="$ACCtext2" valType="str"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
      </TextComponent>
      <TextComponent name="ACCpresen3">
        <Param name="color" updates="constant" val="black" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.05" valType="code"/>
        <Param name="name" updates="None" val="ACCpresen3" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, -0.2)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="300" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="constant" val="-----  Break (within 5 min) -----" valType="str"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
      </TextComponent>
      <TextComponent name="ACCpresen4">
        <Param name="color" updates="constant" val="black" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.05" valType="code"/>
        <Param name="name" updates="None" val="ACCpresen4" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(-0.3, -0.3)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="300" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="constant" val="Please press" valType="str"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
      </TextComponent>
      <TextComponent name="ACCpresen5">
        <Param name="color" updates="constant" val="red" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.06" valType="code"/>
        <Param name="name" updates="None" val="ACCpresen5" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, -0.3)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="300" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="constant" val="SPACE" valType="str"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
      </TextComponent>
      <TextComponent name="ACCpresen6">
        <Param name="color" updates="constant" val="black" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.05" valType="code"/>
        <Param name="name" updates="None" val="ACCpresen6" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0.3, -0.3)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="300" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="constant" val="to continue." valType="str"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
      </TextComponent>
      <KeyboardComponent name="brkResp">
        <Param name="allowedKeys" updates="constant" val="'space'" valType="code"/>
        <Param name="correctAns" updates="constant" val="" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="discard previous" updates="constant" val="True" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="forceEndRoutine" updates="constant" val="True" valType="bool"/>
        <Param name="name" updates="None" val="brkResp" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="300" valType="code"/>
        <Param name="store" updates="constant" val="last key" valType="str"/>
        <Param name="storeCorrect" updates="constant" val="False" valType="bool"/>
        <Param name="syncScreenRefresh" updates="constant" val="True" valType="bool"/>
      </KeyboardComponent>
    </Routine>
    <Routine name="pACCpresen">
      <CodeComponent name="pACCresult">
        <Param name="Before Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Before JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Routine" updates="constant" val="pACCsch = ((pACCschSum / 4) * 100);&amp;#10;pACCschStr = pACCsch.toString();&amp;#10;pACCstr = &quot;&quot;;&amp;#10;if ((pACCschStr.length &gt; 5)) {&amp;#10;    for (var paN = 0, _pj_a = 5; (paN &lt; _pj_a); paN += 1) {&amp;#10;        pACCstr = (pACCstr + pACCschStr[paN]);&amp;#10;    }&amp;#10;} else {&amp;#10;    for (var paN = 0, _pj_a = pACCschStr.length; (paN &lt; _pj_a); paN += 1) {&amp;#10;        pACCstr = (pACCstr + pACCschStr[paN]);&amp;#10;    }&amp;#10;}&amp;#10;pACCtext1 = ((&quot;You detected &quot; + pACCstr) + &quot;% of the targets&quot;);&amp;#10;pACCschR = ((pACCschSumR / 16) * 100);&amp;#10;pACCschStrR = pACCschR.toString();&amp;#10;pACCstrR = &quot;&quot;;&amp;#10;if ((pACCschStrR.length &gt; 5)) {&amp;#10;    for (var paNR = 0, _pj_a = 5; (paNR &lt; _pj_a); paNR += 1) {&amp;#10;        pACCstrR = (pACCstrR + pACCschStrR[paNR]);&amp;#10;    }&amp;#10;} else {&amp;#10;    for (var paNR = 0, _pj_a = pACCschStrR.length; (paNR &lt; _pj_a); paNR += 1) {&amp;#10;        pACCstrR = (pACCstrR + pACCschStrR[paNR]);&amp;#10;    }&amp;#10;}&amp;#10;pACCtext2 = ((&quot;You rejected &quot; + pACCstrR) + &quot;% of the distractors&quot;);&amp;#10;" valType="extendedCode"/>
        <Param name="Begin Routine" updates="constant" val="pACCsch = (pACCschSum/4)*100&amp;#10;pACCschStr = str(pACCsch)&amp;#10;pACCstr = &quot;&quot;&amp;#10;if len(pACCschStr) &gt; 5:&amp;#10;    for paN in range(5):&amp;#10;        pACCstr = pACCstr + pACCschStr[paN]&amp;#10;else:&amp;#10;    for paN in range(len(pACCschStr)):&amp;#10;        pACCstr = pACCstr + pACCschStr[paN]&amp;#10;&amp;#10;pACCtext1 = &quot;You detected &quot;+pACCstr+&quot;% of the targets&quot;&amp;#10;&amp;#10;pACCschR = (pACCschSumR/16)*100&amp;#10;pACCschStrR = str(pACCschR)&amp;#10;pACCstrR = &quot;&quot;&amp;#10;if len(pACCschStrR) &gt; 5:&amp;#10;    for paNR in range(5):&amp;#10;        pACCstrR = pACCstrR + pACCschStrR[paNR]&amp;#10;else:&amp;#10;    for paNR in range(len(pACCschStrR)):&amp;#10;        pACCstrR = pACCstrR + pACCschStrR[paNR]&amp;#10;&amp;#10;pACCtext2 = &quot;You rejected &quot;+pACCstrR+&quot;% of the distractors&quot;" valType="extendedCode"/>
        <Param name="Code Type" updates="None" val="Auto-&gt;JS" valType="str"/>
        <Param name="Each Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="Each JS Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="name" updates="None" val="pACCresult" valType="code"/>
      </CodeComponent>
      <TextComponent name="pACCpresen1">
        <Param name="color" updates="constant" val="black" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.05" valType="code"/>
        <Param name="name" updates="None" val="pACCpresen1" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0.05)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="2" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="set every repeat" val="$pACCtext1" valType="str"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
      </TextComponent>
      <TextComponent name="pACCpresen2">
        <Param name="color" updates="constant" val="black" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.05" valType="code"/>
        <Param name="name" updates="None" val="pACCpresen2" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, -0.05)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="2" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="set every repeat" val="$pACCtext2" valType="str"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
      </TextComponent>
    </Routine>
    <Routine name="instr1">
      <ImageComponent name="instrImg1">
        <Param name="color" updates="constant" val="$[1,1,1]" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flipHoriz" updates="constant" val="False" valType="bool"/>
        <Param name="flipVert" updates="constant" val="False" valType="bool"/>
        <Param name="image" updates="set every repeat" val="$instrOrd1" valType="str"/>
        <Param name="interpolate" updates="constant" val="linear" valType="str"/>
        <Param name="mask" updates="constant" val="None" valType="str"/>
        <Param name="name" updates="None" val="instrImg1" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="size" updates="constant" val="(1.6, 1)" valType="code"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="texture resolution" updates="constant" val="128" valType="code"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
      </ImageComponent>
      <KeyboardComponent name="instrResp1">
        <Param name="allowedKeys" updates="constant" val="'space'" valType="code"/>
        <Param name="correctAns" updates="constant" val="" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="discard previous" updates="constant" val="True" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="forceEndRoutine" updates="constant" val="True" valType="bool"/>
        <Param name="name" updates="None" val="instrResp1" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="store" updates="constant" val="last key" valType="str"/>
        <Param name="storeCorrect" updates="constant" val="False" valType="bool"/>
        <Param name="syncScreenRefresh" updates="constant" val="True" valType="bool"/>
      </KeyboardComponent>
    </Routine>
    <Routine name="instrEnd">
      <ImageComponent name="instr10">
        <Param name="color" updates="constant" val="$[1,1,1]" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flipHoriz" updates="constant" val="False" valType="bool"/>
        <Param name="flipVert" updates="constant" val="False" valType="bool"/>
        <Param name="image" updates="constant" val="Instructions/instr10.png" valType="str"/>
        <Param name="interpolate" updates="constant" val="linear" valType="str"/>
        <Param name="mask" updates="constant" val="None" valType="str"/>
        <Param name="name" updates="None" val="instr10" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="size" updates="constant" val="(1.6, 1)" valType="code"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="texture resolution" updates="constant" val="128" valType="code"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
      </ImageComponent>
      <KeyboardComponent name="instrResp10">
        <Param name="allowedKeys" updates="constant" val="'space'" valType="code"/>
        <Param name="correctAns" updates="constant" val="" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="discard previous" updates="constant" val="True" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="forceEndRoutine" updates="constant" val="True" valType="bool"/>
        <Param name="name" updates="None" val="instrResp10" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="store" updates="constant" val="last key" valType="str"/>
        <Param name="storeCorrect" updates="constant" val="False" valType="bool"/>
        <Param name="syncScreenRefresh" updates="constant" val="True" valType="bool"/>
      </KeyboardComponent>
    </Routine>
    <Routine name="instrSCHeg">
      <ImageComponent name="instrEG">
        <Param name="color" updates="constant" val="$[1,1,1]" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flipHoriz" updates="constant" val="False" valType="bool"/>
        <Param name="flipVert" updates="constant" val="False" valType="bool"/>
        <Param name="image" updates="constant" val="Instructions/s1.jpg" valType="str"/>
        <Param name="interpolate" updates="constant" val="linear" valType="str"/>
        <Param name="mask" updates="constant" val="None" valType="str"/>
        <Param name="name" updates="None" val="instrEG" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="size" updates="constant" val="(0.2, 0.2)" valType="code"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="0.2" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="texture resolution" updates="constant" val="128" valType="code"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
      </ImageComponent>
      <ImageComponent name="egITI">
        <Param name="color" updates="constant" val="$[1,1,1]" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flipHoriz" updates="constant" val="False" valType="bool"/>
        <Param name="flipVert" updates="constant" val="False" valType="bool"/>
        <Param name="image" updates="constant" val="Instructions/ITI.png" valType="str"/>
        <Param name="interpolate" updates="constant" val="linear" valType="str"/>
        <Param name="mask" updates="constant" val="None" valType="str"/>
        <Param name="name" updates="None" val="egITI" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="size" updates="constant" val="(1.6, 1)" valType="code"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.2" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="0.3" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="texture resolution" updates="constant" val="128" valType="code"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
      </ImageComponent>
      <ImageComponent name="instrAnsHint">
        <Param name="color" updates="constant" val="$[1,1,1]" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flipHoriz" updates="constant" val="False" valType="bool"/>
        <Param name="flipVert" updates="constant" val="False" valType="bool"/>
        <Param name="image" updates="constant" val="Instructions/instrHint1.png" valType="str"/>
        <Param name="interpolate" updates="constant" val="linear" valType="str"/>
        <Param name="mask" updates="constant" val="None" valType="str"/>
        <Param name="name" updates="None" val="instrAnsHint" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="size" updates="constant" val="(1.6, 1)" valType="code"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.5" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="texture resolution" updates="constant" val="128" valType="code"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
      </ImageComponent>
      <KeyboardComponent name="instrEGresp">
        <Param name="allowedKeys" updates="constant" val="'m'" valType="code"/>
        <Param name="correctAns" updates="constant" val="" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="discard previous" updates="constant" val="True" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="forceEndRoutine" updates="constant" val="True" valType="bool"/>
        <Param name="name" updates="None" val="instrEGresp" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="store" updates="constant" val="last key" valType="str"/>
        <Param name="storeCorrect" updates="constant" val="False" valType="bool"/>
        <Param name="syncScreenRefresh" updates="constant" val="True" valType="bool"/>
      </KeyboardComponent>
    </Routine>
    <Routine name="instrHintEnd">
      <ImageComponent name="instrHint2">
        <Param name="color" updates="constant" val="$[1,1,1]" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flipHoriz" updates="constant" val="False" valType="bool"/>
        <Param name="flipVert" updates="constant" val="False" valType="bool"/>
        <Param name="image" updates="constant" val="Instructions/instrHint2.png" valType="str"/>
        <Param name="interpolate" updates="constant" val="linear" valType="str"/>
        <Param name="mask" updates="constant" val="None" valType="str"/>
        <Param name="name" updates="None" val="instrHint2" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="size" updates="constant" val="(1.6, 1)" valType="code"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="texture resolution" updates="constant" val="128" valType="code"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
      </ImageComponent>
      <KeyboardComponent name="instrHint2Resp">
        <Param name="allowedKeys" updates="constant" val="'space'" valType="code"/>
        <Param name="correctAns" updates="constant" val="" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="discard previous" updates="constant" val="True" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="forceEndRoutine" updates="constant" val="True" valType="bool"/>
        <Param name="name" updates="None" val="instrHint2Resp" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="store" updates="constant" val="last key" valType="str"/>
        <Param name="storeCorrect" updates="constant" val="False" valType="bool"/>
        <Param name="syncScreenRefresh" updates="constant" val="True" valType="bool"/>
      </KeyboardComponent>
    </Routine>
    <Routine name="instrInter">
      <ImageComponent name="imageITI">
        <Param name="color" updates="constant" val="$[1,1,1]" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flipHoriz" updates="constant" val="False" valType="bool"/>
        <Param name="flipVert" updates="constant" val="False" valType="bool"/>
        <Param name="image" updates="constant" val="Instructions/ITI.png" valType="str"/>
        <Param name="interpolate" updates="constant" val="linear" valType="str"/>
        <Param name="mask" updates="constant" val="None" valType="str"/>
        <Param name="name" updates="None" val="imageITI" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="size" updates="constant" val="(1.6, 1)" valType="code"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="1.0" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="texture resolution" updates="constant" val="128" valType="code"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
      </ImageComponent>
    </Routine>
    <Routine name="instrHintExp">
      <ImageComponent name="instrHint3">
        <Param name="color" updates="constant" val="$[1,1,1]" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flipHoriz" updates="constant" val="False" valType="bool"/>
        <Param name="flipVert" updates="constant" val="False" valType="bool"/>
        <Param name="image" updates="constant" val="Instructions/instrHint3.png" valType="str"/>
        <Param name="interpolate" updates="constant" val="linear" valType="str"/>
        <Param name="mask" updates="constant" val="None" valType="str"/>
        <Param name="name" updates="None" val="instrHint3" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="size" updates="constant" val="(1.6, 1)" valType="code"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="texture resolution" updates="constant" val="128" valType="code"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
      </ImageComponent>
      <KeyboardComponent name="instrHint3Resp">
        <Param name="allowedKeys" updates="constant" val="'space'" valType="code"/>
        <Param name="correctAns" updates="constant" val="" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="discard previous" updates="constant" val="True" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="forceEndRoutine" updates="constant" val="True" valType="bool"/>
        <Param name="name" updates="None" val="instrHint3Resp" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="store" updates="constant" val="last key" valType="str"/>
        <Param name="storeCorrect" updates="constant" val="False" valType="bool"/>
        <Param name="syncScreenRefresh" updates="constant" val="True" valType="bool"/>
      </KeyboardComponent>
    </Routine>
    <Routine name="instrSCH">
      <ImageComponent name="instrImgSCH">
        <Param name="color" updates="constant" val="$[1,1,1]" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flipHoriz" updates="constant" val="False" valType="bool"/>
        <Param name="flipVert" updates="constant" val="False" valType="bool"/>
        <Param name="image" updates="set every repeat" val="$instrOrd3" valType="str"/>
        <Param name="interpolate" updates="constant" val="linear" valType="str"/>
        <Param name="mask" updates="constant" val="None" valType="str"/>
        <Param name="name" updates="None" val="instrImgSCH" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="size" updates="constant" val="(0.2, 0.2)" valType="code"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="0.2" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="texture resolution" updates="constant" val="128" valType="code"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
      </ImageComponent>
      <ImageComponent name="instrITI">
        <Param name="color" updates="constant" val="$[1,1,1]" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flipHoriz" updates="constant" val="False" valType="bool"/>
        <Param name="flipVert" updates="constant" val="False" valType="bool"/>
        <Param name="image" updates="constant" val="Instructions/ITI.png" valType="str"/>
        <Param name="interpolate" updates="constant" val="linear" valType="str"/>
        <Param name="mask" updates="constant" val="None" valType="str"/>
        <Param name="name" updates="None" val="instrITI" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="size" updates="constant" val="(1.6, 1)" valType="code"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.2" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="1.8" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="texture resolution" updates="constant" val="128" valType="code"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
      </ImageComponent>
      <KeyboardComponent name="instrRespSCH">
        <Param name="allowedKeys" updates="constant" val="'z','m'" valType="code"/>
        <Param name="correctAns" updates="constant" val="" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="discard previous" updates="constant" val="True" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="forceEndRoutine" updates="constant" val="False" valType="bool"/>
        <Param name="name" updates="None" val="instrRespSCH" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="2" valType="code"/>
        <Param name="store" updates="constant" val="last key" valType="str"/>
        <Param name="storeCorrect" updates="constant" val="False" valType="bool"/>
        <Param name="syncScreenRefresh" updates="constant" val="True" valType="bool"/>
      </KeyboardComponent>
    </Routine>
    <Routine name="instrEG1">
      <ImageComponent name="instrImg5">
        <Param name="color" updates="constant" val="$[1,1,1]" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flipHoriz" updates="constant" val="False" valType="bool"/>
        <Param name="flipVert" updates="constant" val="False" valType="bool"/>
        <Param name="image" updates="constant" val="Instructions/instr5.png" valType="str"/>
        <Param name="interpolate" updates="constant" val="linear" valType="str"/>
        <Param name="mask" updates="constant" val="None" valType="str"/>
        <Param name="name" updates="None" val="instrImg5" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="size" updates="constant" val="(1.6, 1)" valType="code"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="texture resolution" updates="constant" val="128" valType="code"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
      </ImageComponent>
      <KeyboardComponent name="instrResp5">
        <Param name="allowedKeys" updates="constant" val="'z'" valType="code"/>
        <Param name="correctAns" updates="constant" val="" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="discard previous" updates="constant" val="True" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="forceEndRoutine" updates="constant" val="True" valType="bool"/>
        <Param name="name" updates="None" val="instrResp5" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="store" updates="constant" val="last key" valType="str"/>
        <Param name="storeCorrect" updates="constant" val="False" valType="bool"/>
        <Param name="syncScreenRefresh" updates="constant" val="True" valType="bool"/>
      </KeyboardComponent>
    </Routine>
    <Routine name="instrEG2">
      <ImageComponent name="instrImg6">
        <Param name="color" updates="constant" val="$[1,1,1]" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flipHoriz" updates="constant" val="False" valType="bool"/>
        <Param name="flipVert" updates="constant" val="False" valType="bool"/>
        <Param name="image" updates="constant" val="Instructions/instr6.png" valType="str"/>
        <Param name="interpolate" updates="constant" val="linear" valType="str"/>
        <Param name="mask" updates="constant" val="None" valType="str"/>
        <Param name="name" updates="None" val="instrImg6" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="size" updates="constant" val="(1.6, 1)" valType="code"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="texture resolution" updates="constant" val="128" valType="code"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
      </ImageComponent>
      <KeyboardComponent name="instrResp6">
        <Param name="allowedKeys" updates="constant" val="'m'" valType="code"/>
        <Param name="correctAns" updates="constant" val="" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="discard previous" updates="constant" val="True" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="forceEndRoutine" updates="constant" val="True" valType="bool"/>
        <Param name="name" updates="None" val="instrResp6" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="store" updates="constant" val="last key" valType="str"/>
        <Param name="storeCorrect" updates="constant" val="False" valType="bool"/>
        <Param name="syncScreenRefresh" updates="constant" val="True" valType="bool"/>
      </KeyboardComponent>
    </Routine>
    <Routine name="instr2">
      <ImageComponent name="instrImg3">
        <Param name="color" updates="constant" val="$[1,1,1]" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flipHoriz" updates="constant" val="False" valType="bool"/>
        <Param name="flipVert" updates="constant" val="False" valType="bool"/>
        <Param name="image" updates="set every repeat" val="$instrOrd2" valType="str"/>
        <Param name="interpolate" updates="constant" val="linear" valType="str"/>
        <Param name="mask" updates="constant" val="None" valType="str"/>
        <Param name="name" updates="None" val="instrImg3" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="size" updates="constant" val="(1.6, 1)" valType="code"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="texture resolution" updates="constant" val="128" valType="code"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
      </ImageComponent>
      <KeyboardComponent name="instrResp3">
        <Param name="allowedKeys" updates="constant" val="'space'" valType="code"/>
        <Param name="correctAns" updates="constant" val="" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="discard previous" updates="constant" val="True" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="forceEndRoutine" updates="constant" val="True" valType="bool"/>
        <Param name="name" updates="None" val="instrResp3" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="store" updates="constant" val="last key" valType="str"/>
        <Param name="storeCorrect" updates="constant" val="False" valType="bool"/>
        <Param name="syncScreenRefresh" updates="constant" val="True" valType="bool"/>
      </KeyboardComponent>
    </Routine>
    <Routine name="goodbye">
      <TextComponent name="gdy">
        <Param name="color" updates="constant" val="black" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.06" valType="code"/>
        <Param name="name" updates="None" val="gdy" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="3" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="constant" val="All done!&amp;#10;Your experiment will be completely finished after a few seconds.&amp;#10;Have a nice day." valType="str"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
      </TextComponent>
    </Routine>
  </Routines>
  <Flow>
    <LoopInitiator loopType="TrialHandler" name="instr1_loop">
      <Param name="Selected rows" updates="None" val="" valType="str"/>
      <Param name="conditions" updates="None" val="[OrderedDict([('instrOrd1', 'Instructions/instr1.png')]), OrderedDict([('instrOrd1', 'Instructions/instr2.png')]), OrderedDict([('instrOrd1', 'Instructions/instr3.png')]), OrderedDict([('instrOrd1', 'Instructions/instr4.png')])]" valType="str"/>
      <Param name="conditionsFile" updates="None" val="Instructions\instrP1.xlsx" valType="str"/>
      <Param name="endPoints" updates="None" val="[0, 1]" valType="num"/>
      <Param name="isTrials" updates="None" val="True" valType="bool"/>
      <Param name="loopType" updates="None" val="sequential" valType="str"/>
      <Param name="nReps" updates="None" val="1" valType="code"/>
      <Param name="name" updates="None" val="instr1_loop" valType="code"/>
      <Param name="random seed" updates="None" val="" valType="code"/>
    </LoopInitiator>
    <Routine name="instr1"/>
    <LoopTerminator name="instr1_loop"/>
    <Routine name="instrEG1"/>
    <Routine name="instrEG2"/>
    <LoopInitiator loopType="TrialHandler" name="instr2_loop">
      <Param name="Selected rows" updates="None" val="" valType="str"/>
      <Param name="conditions" updates="None" val="[OrderedDict([('instrOrd2', 'Instructions/instr7.png')]), OrderedDict([('instrOrd2', 'Instructions/instr8.png')]), OrderedDict([('instrOrd2', 'Instructions/instr9.png')])]" valType="str"/>
      <Param name="conditionsFile" updates="None" val="Instructions\instrP2.xlsx" valType="str"/>
      <Param name="endPoints" updates="None" val="[0, 1]" valType="num"/>
      <Param name="isTrials" updates="None" val="True" valType="bool"/>
      <Param name="loopType" updates="None" val="sequential" valType="str"/>
      <Param name="nReps" updates="None" val="1" valType="code"/>
      <Param name="name" updates="None" val="instr2_loop" valType="code"/>
      <Param name="random seed" updates="None" val="" valType="code"/>
    </LoopInitiator>
    <Routine name="instr2"/>
    <LoopTerminator name="instr2_loop"/>
    <Routine name="instrSCHeg"/>
    <Routine name="instrHintEnd"/>
    <Routine name="instrInter"/>
    <LoopInitiator loopType="TrialHandler" name="instr3_loop">
      <Param name="Selected rows" updates="None" val="" valType="str"/>
      <Param name="conditions" updates="None" val="[OrderedDict([('instrOrd2', 'Instructions/instr7.png')]), OrderedDict([('instrOrd2', 'Instructions/instr8.png')]), OrderedDict([('instrOrd2', 'Instructions/instr9.png')])]" valType="str"/>
      <Param name="conditionsFile" updates="None" val="Instructions\instrP3.xlsx" valType="str"/>
      <Param name="endPoints" updates="None" val="[0, 1]" valType="num"/>
      <Param name="isTrials" updates="None" val="True" valType="bool"/>
      <Param name="loopType" updates="None" val="random" valType="str"/>
      <Param name="nReps" updates="None" val="1" valType="code"/>
      <Param name="name" updates="None" val="instr3_loop" valType="code"/>
      <Param name="random seed" updates="None" val="" valType="code"/>
    </LoopInitiator>
    <Routine name="instrSCH"/>
    <LoopTerminator name="instr3_loop"/>
    <Routine name="instrHintExp"/>
    <Routine name="instrEnd"/>
    <Routine name="pracStart"/>
    <LoopInitiator loopType="TrialHandler" name="practice_loop">
      <Param name="Selected rows" updates="None" val="" valType="str"/>
      <Param name="conditions" updates="None" val="[OrderedDict([('pStudyOrd', 'Practice/pStudy2.xlsx'), ('pTest1', 'Practice/pTest2_1.xlsx'), ('pTest2', 'Practice/pTest2_2.xlsx'), ('pTest3', 'Practice/pTest2_3.xlsx'), ('pSearch', 'Practice/pSearch2.xlsx')])]" valType="str"/>
      <Param name="conditionsFile" updates="None" val="Practice\pstList.xlsx" valType="str"/>
      <Param name="endPoints" updates="None" val="[0, 1]" valType="num"/>
      <Param name="isTrials" updates="None" val="True" valType="bool"/>
      <Param name="loopType" updates="None" val="random" valType="str"/>
      <Param name="nReps" updates="None" val="1" valType="code"/>
      <Param name="name" updates="None" val="practice_loop" valType="code"/>
      <Param name="random seed" updates="None" val="" valType="code"/>
    </LoopInitiator>
    <Routine name="pTBRctrl"/>
    <LoopInitiator loopType="TrialHandler" name="pTBR_loop">
      <Param name="Selected rows" updates="None" val="" valType="str"/>
      <Param name="conditions" updates="None" val="None" valType="str"/>
      <Param name="conditionsFile" updates="None" val="" valType="str"/>
      <Param name="endPoints" updates="None" val="[0, 1]" valType="num"/>
      <Param name="isTrials" updates="None" val="True" valType="bool"/>
      <Param name="loopType" updates="None" val="random" valType="str"/>
      <Param name="nReps" updates="None" val="5" valType="code"/>
      <Param name="name" updates="None" val="pTBR_loop" valType="code"/>
      <Param name="random seed" updates="None" val="" valType="code"/>
    </LoopInitiator>
    <Routine name="jdgTestFile"/>
    <LoopInitiator loopType="TrialHandler" name="psPresen_loop">
      <Param name="Selected rows" updates="None" val="" valType="str"/>
      <Param name="conditions" updates="None" val="None" valType="str"/>
      <Param name="conditionsFile" updates="None" val="" valType="str"/>
      <Param name="endPoints" updates="None" val="[0, 1]" valType="num"/>
      <Param name="isTrials" updates="None" val="True" valType="bool"/>
      <Param name="loopType" updates="None" val="random" valType="str"/>
      <Param name="nReps" updates="None" val="pstLoopCtrl" valType="code"/>
      <Param name="name" updates="None" val="psPresen_loop" valType="code"/>
      <Param name="random seed" updates="None" val="" valType="code"/>
    </LoopInitiator>
    <Routine name="pStudyHint"/>
    <LoopInitiator loopType="TrialHandler" name="pStudy_loop">
      <Param name="Selected rows" updates="None" val="" valType="str"/>
      <Param name="conditions" updates="None" val="None" valType="str"/>
      <Param name="conditionsFile" updates="None" val="$pStudyOrd" valType="str"/>
      <Param name="endPoints" updates="None" val="[0, 1]" valType="num"/>
      <Param name="isTrials" updates="None" val="True" valType="bool"/>
      <Param name="loopType" updates="None" val="random" valType="str"/>
      <Param name="nReps" updates="None" val="1" valType="code"/>
      <Param name="name" updates="None" val="pStudy_loop" valType="code"/>
      <Param name="random seed" updates="None" val="" valType="code"/>
    </LoopInitiator>
    <Routine name="pStudyTrials"/>
    <LoopTerminator name="pStudy_loop"/>
    <LoopTerminator name="psPresen_loop"/>
    <LoopInitiator loopType="TrialHandler" name="ptHint_loop">
      <Param name="Selected rows" updates="None" val="" valType="str"/>
      <Param name="conditions" updates="None" val="None" valType="str"/>
      <Param name="conditionsFile" updates="None" val="" valType="str"/>
      <Param name="endPoints" updates="None" val="[0, 1]" valType="num"/>
      <Param name="isTrials" updates="None" val="True" valType="bool"/>
      <Param name="loopType" updates="None" val="random" valType="str"/>
      <Param name="nReps" updates="None" val="pthLoopCtrl " valType="code"/>
      <Param name="name" updates="None" val="ptHint_loop" valType="code"/>
      <Param name="random seed" updates="None" val="" valType="code"/>
    </LoopInitiator>
    <Routine name="pTestHint"/>
    <LoopTerminator name="ptHint_loop"/>
    <LoopInitiator loopType="TrialHandler" name="pTest_loop">
      <Param name="Selected rows" updates="None" val="" valType="str"/>
      <Param name="conditions" updates="None" val="None" valType="str"/>
      <Param name="conditionsFile" updates="None" val="$pTestFile" valType="str"/>
      <Param name="endPoints" updates="None" val="[0, 1]" valType="num"/>
      <Param name="isTrials" updates="None" val="True" valType="bool"/>
      <Param name="loopType" updates="None" val="random" valType="str"/>
      <Param name="nReps" updates="None" val="ptestLoopCtrl" valType="code"/>
      <Param name="name" updates="None" val="pTest_loop" valType="code"/>
      <Param name="random seed" updates="None" val="" valType="code"/>
    </LoopInitiator>
    <Routine name="pTestTrials"/>
    <Routine name="pTextITI"/>
    <LoopTerminator name="pTest_loop"/>
    <Routine name="pACCcount"/>
    <LoopInitiator loopType="TrialHandler" name="endHint_loop">
      <Param name="Selected rows" updates="None" val="" valType="str"/>
      <Param name="conditions" updates="None" val="None" valType="str"/>
      <Param name="conditionsFile" updates="None" val="" valType="str"/>
      <Param name="endPoints" updates="None" val="[0, 1]" valType="num"/>
      <Param name="isTrials" updates="None" val="True" valType="bool"/>
      <Param name="loopType" updates="None" val="random" valType="str"/>
      <Param name="nReps" updates="None" val="pendExpTag" valType="code"/>
      <Param name="name" updates="None" val="endHint_loop" valType="code"/>
      <Param name="random seed" updates="None" val="" valType="code"/>
    </LoopInitiator>
    <Routine name="endHint"/>
    <LoopTerminator name="endHint_loop"/>
    <LoopTerminator name="pTBR_loop"/>
    <Routine name="pSearchHint"/>
    <LoopInitiator loopType="TrialHandler" name="pSearch_loop">
      <Param name="Selected rows" updates="None" val="" valType="str"/>
      <Param name="conditions" updates="None" val="None" valType="str"/>
      <Param name="conditionsFile" updates="None" val="$pSearch" valType="str"/>
      <Param name="endPoints" updates="None" val="[0, 1]" valType="num"/>
      <Param name="isTrials" updates="None" val="True" valType="bool"/>
      <Param name="loopType" updates="None" val="random" valType="str"/>
      <Param name="nReps" updates="None" val="1" valType="code"/>
      <Param name="name" updates="None" val="pSearch_loop" valType="code"/>
      <Param name="random seed" updates="None" val="" valType="code"/>
    </LoopInitiator>
    <Routine name="pSearchTrials"/>
    <LoopTerminator name="pSearch_loop"/>
    <Routine name="pACCpresen"/>
    <LoopTerminator name="practice_loop"/>
    <Routine name="expStart"/>
    <Routine name="preExp"/>
    <LoopInitiator loopType="TrialHandler" name="blockOrd">
      <Param name="Selected rows" updates="None" val="" valType="str"/>
      <Param name="conditions" updates="None" val="[OrderedDict([('stimCateList', 'StimList/objCate.xls'), ('setsize', 1), ('stimCate', 'Objects'), ('testOrd', 'StimList/testOrd1.xlsx')]), OrderedDict([('stimCateList', 'StimList/objCate.xls'), ('setsize', 2), ('stimCate', 'Objects'), ('testOrd', 'StimList/testOrd2.xlsx')]), OrderedDict([('stimCateList', 'StimList/objCate.xls'), ('setsize', 4), ('stimCate', 'Objects'), ('testOrd', 'StimList/testOrd4.xlsx')]), OrderedDict([('stimCateList', 'StimList/objCate.xls'), ('setsize', 8), ('stimCate', 'Objects'), ('testOrd', 'StimList/testOrd8.xlsx')]), OrderedDict([('stimCateList', 'StimList/objCate.xls'), ('setsize', 16), ('stimCate', 'Objects'), ('testOrd', 'StimList/testOrd16.xlsx')])]" valType="str"/>
      <Param name="conditionsFile" updates="None" val="StimList\setOrdObj.xlsx" valType="str"/>
      <Param name="endPoints" updates="None" val="[0, 1]" valType="num"/>
      <Param name="isTrials" updates="None" val="True" valType="bool"/>
      <Param name="loopType" updates="None" val="random" valType="str"/>
      <Param name="nReps" updates="None" val="1" valType="code"/>
      <Param name="name" updates="None" val="blockOrd" valType="code"/>
      <Param name="random seed" updates="None" val="" valType="code"/>
    </LoopInitiator>
    <Routine name="subCountBegin"/>
    <LoopInitiator loopType="TrialHandler" name="sub30_loop">
      <Param name="Selected rows" updates="None" val="" valType="str"/>
      <Param name="conditions" updates="None" val="None" valType="str"/>
      <Param name="conditionsFile" updates="None" val="$stimCateList" valType="str"/>
      <Param name="endPoints" updates="None" val="[0, 1]" valType="num"/>
      <Param name="isTrials" updates="None" val="True" valType="bool"/>
      <Param name="loopType" updates="None" val="random" valType="str"/>
      <Param name="nReps" updates="None" val="1" valType="code"/>
      <Param name="name" updates="None" val="sub30_loop" valType="code"/>
      <Param name="random seed" updates="None" val="" valType="code"/>
    </LoopInitiator>
    <Routine name="stimCountBegin"/>
    <LoopInitiator loopType="TrialHandler" name="stim17_loop">
      <Param name="Selected rows" updates="None" val="" valType="str"/>
      <Param name="conditions" updates="None" val="None" valType="str"/>
      <Param name="conditionsFile" updates="None" val="$stimSubCate" valType="str"/>
      <Param name="endPoints" updates="None" val="[0, 1]" valType="num"/>
      <Param name="isTrials" updates="None" val="True" valType="bool"/>
      <Param name="loopType" updates="None" val="random" valType="str"/>
      <Param name="nReps" updates="None" val="1" valType="code"/>
      <Param name="name" updates="None" val="stim17_loop" valType="code"/>
      <Param name="random seed" updates="None" val="" valType="code"/>
    </LoopInitiator>
    <Routine name="inAllStim"/>
    <LoopTerminator name="stim17_loop"/>
    <Routine name="subCountPlus"/>
    <LoopTerminator name="sub30_loop"/>
    <Routine name="distrCtrl"/>
    <LoopInitiator loopType="TrialHandler" name="distr_loop">
      <Param name="Selected rows" updates="None" val="" valType="str"/>
      <Param name="conditions" updates="None" val="[OrderedDict([('stimSubCate', 'StimList/beast.xls')]), OrderedDict([('stimSubCate', 'StimList/bird.xls')]), OrderedDict([('stimSubCate', 'StimList/butterfly.xls')]), OrderedDict([('stimSubCate', 'StimList/cat.xls')]), OrderedDict([('stimSubCate', 'StimList/cow.xls')]), OrderedDict([('stimSubCate', 'StimList/crustacea.xls')]), OrderedDict([('stimSubCate', 'StimList/deer.xls')]), OrderedDict([('stimSubCate', 'StimList/dog.xls')]), OrderedDict([('stimSubCate', 'StimList/dragonfly.xls')]), OrderedDict([('stimSubCate', 'StimList/fish.xls')]), OrderedDict([('stimSubCate', 'StimList/frog.xls')]), OrderedDict([('stimSubCate', 'StimList/hoofed.xls')]), OrderedDict([('stimSubCate', 'StimList/horse.xls')]), OrderedDict([('stimSubCate', 'StimList/insect.xls')]), OrderedDict([('stimSubCate', 'StimList/marine.xls')]), OrderedDict([('stimSubCate', 'StimList/marsupialia_australia.xls')]), OrderedDict([('stimSubCate', 'StimList/mustelidae.xls')]), OrderedDict([('stimSubCate', 'StimList/panthera.xls')]), OrderedDict([('stimSubCate', 'StimList/poultry.xls')]), OrderedDict([('stimSubCate', 'StimList/primate.xls')]), OrderedDict([('stimSubCate', 'StimList/procyon_civet.xls')]), OrderedDict([('stimSubCate', 'StimList/rabbit.xls')]), OrderedDict([('stimSubCate', 'StimList/rat.xls')]), OrderedDict([('stimSubCate', 'StimList/reptile.xls')]), OrderedDict([('stimSubCate', 'StimList/seashell.xls')]), OrderedDict([('stimSubCate', 'StimList/sheep_alpaca.xls')]), OrderedDict([('stimSubCate', 'StimList/spider.xls')]), OrderedDict([('stimSubCate', 'StimList/suiformes.xls')]), OrderedDict([('stimSubCate', 'StimList/turtle.xls')]), OrderedDict([('stimSubCate', 'StimList/wolf.xls')])]" valType="str"/>
      <Param name="conditionsFile" updates="None" val="StimList\animCate.xls" valType="str"/>
      <Param name="endPoints" updates="None" val="[0, 1]" valType="num"/>
      <Param name="isTrials" updates="None" val="True" valType="bool"/>
      <Param name="loopType" updates="None" val="random" valType="str"/>
      <Param name="nReps" updates="None" val="1" valType="code"/>
      <Param name="name" updates="None" val="distr_loop" valType="code"/>
      <Param name="random seed" updates="None" val="" valType="code"/>
    </LoopInitiator>
    <Routine name="altStimCountBegin"/>
    <LoopInitiator loopType="TrialHandler" name="altDistrStim_loop">
      <Param name="Selected rows" updates="None" val="" valType="str"/>
      <Param name="conditions" updates="None" val="None" valType="str"/>
      <Param name="conditionsFile" updates="None" val="$stimSubCate" valType="str"/>
      <Param name="endPoints" updates="None" val="[0, 1]" valType="num"/>
      <Param name="isTrials" updates="None" val="True" valType="bool"/>
      <Param name="loopType" updates="None" val="random" valType="str"/>
      <Param name="nReps" updates="None" val="1" valType="code"/>
      <Param name="name" updates="None" val="altDistrStim_loop" valType="code"/>
      <Param name="random seed" updates="None" val="" valType="code"/>
    </LoopInitiator>
    <Routine name="inAltDistr"/>
    <LoopTerminator name="altDistrStim_loop"/>
    <LoopTerminator name="distr_loop"/>
    <Routine name="distrCountBegin"/>
    <LoopInitiator loopType="TrialHandler" name="chooseDistr_loop">
      <Param name="Selected rows" updates="None" val="" valType="str"/>
      <Param name="conditions" updates="None" val="[OrderedDict([('distrIndx', 0)]), OrderedDict([('distrIndx', 1)]), OrderedDict([('distrIndx', 2)]), OrderedDict([('distrIndx', 3)]), OrderedDict([('distrIndx', 4)]), OrderedDict([('distrIndx', 5)]), OrderedDict([('distrIndx', 6)]), OrderedDict([('distrIndx', 7)]), OrderedDict([('distrIndx', 8)]), OrderedDict([('distrIndx', 9)]), OrderedDict([('distrIndx', 10)]), OrderedDict([('distrIndx', 11)]), OrderedDict([('distrIndx', 12)]), OrderedDict([('distrIndx', 13)]), OrderedDict([('distrIndx', 14)]), OrderedDict([('distrIndx', 15)]), OrderedDict([('distrIndx', 16)]), OrderedDict([('distrIndx', 17)]), OrderedDict([('distrIndx', 18)]), OrderedDict([('distrIndx', 19)]), OrderedDict([('distrIndx', 20)]), OrderedDict([('distrIndx', 21)]), OrderedDict([('distrIndx', 22)]), OrderedDict([('distrIndx', 23)])]" valType="str"/>
      <Param name="conditionsFile" updates="None" val="StimList\distrIndxList.xlsx" valType="str"/>
      <Param name="endPoints" updates="None" val="[0, 1]" valType="num"/>
      <Param name="isTrials" updates="None" val="True" valType="bool"/>
      <Param name="loopType" updates="None" val="random" valType="str"/>
      <Param name="nReps" updates="None" val="1" valType="code"/>
      <Param name="name" updates="None" val="chooseDistr_loop" valType="code"/>
      <Param name="random seed" updates="None" val="" valType="code"/>
    </LoopInitiator>
    <Routine name="inBothDistr"/>
    <LoopTerminator name="chooseDistr_loop"/>
    <Routine name="listMerge"/>
    <LoopInitiator loopType="TrialHandler" name="TBR_loop">
      <Param name="Selected rows" updates="None" val="" valType="str"/>
      <Param name="conditions" updates="None" val="None" valType="str"/>
      <Param name="conditionsFile" updates="None" val="" valType="str"/>
      <Param name="endPoints" updates="None" val="[0, 1]" valType="num"/>
      <Param name="isTrials" updates="None" val="True" valType="bool"/>
      <Param name="loopType" updates="None" val="random" valType="str"/>
      <Param name="nReps" updates="None" val="5" valType="code"/>
      <Param name="name" updates="None" val="TBR_loop" valType="code"/>
      <Param name="random seed" updates="None" val="" valType="code"/>
    </LoopInitiator>
    <Routine name="TBRLoopCtrl"/>
    <LoopInitiator loopType="TrialHandler" name="study_presen">
      <Param name="Selected rows" updates="None" val="" valType="str"/>
      <Param name="conditions" updates="None" val="None" valType="str"/>
      <Param name="conditionsFile" updates="None" val="" valType="str"/>
      <Param name="endPoints" updates="None" val="[0, 1]" valType="num"/>
      <Param name="isTrials" updates="None" val="True" valType="bool"/>
      <Param name="loopType" updates="None" val="random" valType="str"/>
      <Param name="nReps" updates="None" val="stLoopCtrl" valType="code"/>
      <Param name="name" updates="None" val="study_presen" valType="code"/>
      <Param name="random seed" updates="None" val="" valType="code"/>
    </LoopInitiator>
    <Routine name="studyHint"/>
    <LoopInitiator loopType="TrialHandler" name="study_loop">
      <Param name="Selected rows" updates="None" val="" valType="str"/>
      <Param name="conditions" updates="None" val="None" valType="str"/>
      <Param name="conditionsFile" updates="None" val="" valType="str"/>
      <Param name="endPoints" updates="None" val="[0, 1]" valType="num"/>
      <Param name="isTrials" updates="None" val="True" valType="bool"/>
      <Param name="loopType" updates="None" val="random" valType="str"/>
      <Param name="nReps" updates="None" val="setsize" valType="code"/>
      <Param name="name" updates="None" val="study_loop" valType="code"/>
      <Param name="random seed" updates="None" val="" valType="code"/>
    </LoopInitiator>
    <Routine name="studyTrials"/>
    <LoopTerminator name="study_loop"/>
    <LoopTerminator name="study_presen"/>
    <LoopInitiator loopType="TrialHandler" name="testHint_presen">
      <Param name="Selected rows" updates="None" val="" valType="str"/>
      <Param name="conditions" updates="None" val="None" valType="str"/>
      <Param name="conditionsFile" updates="None" val="" valType="str"/>
      <Param name="endPoints" updates="None" val="[0, 1]" valType="num"/>
      <Param name="isTrials" updates="None" val="True" valType="bool"/>
      <Param name="loopType" updates="None" val="random" valType="str"/>
      <Param name="nReps" updates="None" val="thLoopCtrl" valType="code"/>
      <Param name="name" updates="None" val="testHint_presen" valType="code"/>
      <Param name="random seed" updates="None" val="" valType="code"/>
    </LoopInitiator>
    <Routine name="testHint"/>
    <LoopTerminator name="testHint_presen"/>
    <LoopInitiator loopType="TrialHandler" name="test_loop">
      <Param name="Selected rows" updates="None" val="" valType="str"/>
      <Param name="conditions" updates="None" val="None" valType="str"/>
      <Param name="conditionsFile" updates="None" val="$testLoopNum" valType="str"/>
      <Param name="endPoints" updates="None" val="[0, 1]" valType="num"/>
      <Param name="isTrials" updates="None" val="True" valType="bool"/>
      <Param name="loopType" updates="None" val="random" valType="str"/>
      <Param name="nReps" updates="None" val="testLoopCtrl" valType="code"/>
      <Param name="name" updates="None" val="test_loop" valType="code"/>
      <Param name="random seed" updates="None" val="" valType="code"/>
    </LoopInitiator>
    <Routine name="testTrials"/>
    <Routine name="test_iti"/>
    <LoopTerminator name="test_loop"/>
    <Routine name="TBRcountPlus"/>
    <LoopInitiator loopType="TrialHandler" name="expCtrl_loop">
      <Param name="Selected rows" updates="None" val="" valType="str"/>
      <Param name="conditions" updates="None" val="None" valType="str"/>
      <Param name="conditionsFile" updates="None" val="" valType="str"/>
      <Param name="endPoints" updates="None" val="[0, 1]" valType="num"/>
      <Param name="isTrials" updates="None" val="True" valType="bool"/>
      <Param name="loopType" updates="None" val="random" valType="str"/>
      <Param name="nReps" updates="None" val="endExpTag" valType="code"/>
      <Param name="name" updates="None" val="expCtrl_loop" valType="code"/>
      <Param name="random seed" updates="None" val="" valType="code"/>
    </LoopInitiator>
    <Routine name="expEND"/>
    <LoopTerminator name="expCtrl_loop"/>
    <LoopTerminator name="TBR_loop"/>
    <Routine name="searchHint"/>
    <LoopInitiator loopType="TrialHandler" name="sch_loop">
      <Param name="Selected rows" updates="None" val="" valType="str"/>
      <Param name="conditions" updates="None" val="[OrderedDict([('trialIndx', 0), ('itiDur', 1.6)]), OrderedDict([('trialIndx', 1), ('itiDur', 1.6)]), OrderedDict([('trialIndx', 2), ('itiDur', 1.6)]), OrderedDict([('trialIndx', 3), ('itiDur', 1.6)]), OrderedDict([('trialIndx', 4), ('itiDur', 1.6)]), OrderedDict([('trialIndx', 5), ('itiDur', 1.6)]), OrderedDict([('trialIndx', 6), ('itiDur', 1.6)]), OrderedDict([('trialIndx', 7), ('itiDur', 1.6)]), OrderedDict([('trialIndx', 8), ('itiDur', 1.6)]), OrderedDict([('trialIndx', 9), ('itiDur', 1.6)]), OrderedDict([('trialIndx', 10), ('itiDur', 1.6)]), OrderedDict([('trialIndx', 11), ('itiDur', 1.6)]), OrderedDict([('trialIndx', 12), ('itiDur', 1.6)]), OrderedDict([('trialIndx', 13), ('itiDur', 1.6)]), OrderedDict([('trialIndx', 14), ('itiDur', 1.6)]), OrderedDict([('trialIndx', 15), ('itiDur', 1.6)]), OrderedDict([('trialIndx', 16), ('itiDur', 1.6)]), OrderedDict([('trialIndx', 17), ('itiDur', 1.6)]), OrderedDict([('trialIndx', 18), ('itiDur', 1.6)]), OrderedDict([('trialIndx', 19), ('itiDur', 1.6)]), OrderedDict([('trialIndx', 20), ('itiDur', 1.6)]), OrderedDict([('trialIndx', 21), ('itiDur', 1.6)]), OrderedDict([('trialIndx', 22), ('itiDur', 1.6)]), OrderedDict([('trialIndx', 23), ('itiDur', 1.6)]), OrderedDict([('trialIndx', 24), ('itiDur', 1.6)]), OrderedDict([('trialIndx', 25), ('itiDur', 1.6)]), OrderedDict([('trialIndx', 26), ('itiDur', 1.6)]), OrderedDict([('trialIndx', 27), ('itiDur', 1.6)]), OrderedDict([('trialIndx', 28), ('itiDur', 1.6)]), OrderedDict([('trialIndx', 29), ('itiDur', 1.6)]), OrderedDict([('trialIndx', 30), ('itiDur', 2.0)]), OrderedDict([('trialIndx', 31), ('itiDur', 2.0)]), OrderedDict([('trialIndx', 32), ('itiDur', 2.0)]), OrderedDict([('trialIndx', 33), ('itiDur', 2.0)]), OrderedDict([('trialIndx', 34), ('itiDur', 2.0)]), OrderedDict([('trialIndx', 35), ('itiDur', 2.0)]), OrderedDict([('trialIndx', 36), ('itiDur', 2.0)]), OrderedDict([('trialIndx', 37), ('itiDur', 2.0)]), OrderedDict([('trialIndx', 38), ('itiDur', 2.0)]), OrderedDict([('trialIndx', 39), ('itiDur', 2.0)]), OrderedDict([('trialIndx', 40), ('itiDur', 2.0)]), OrderedDict([('trialIndx', 41), ('itiDur', 2.0)]), OrderedDict([('trialIndx', 42), ('itiDur', 2.0)]), OrderedDict([('trialIndx', 43), ('itiDur', 2.0)]), OrderedDict([('trialIndx', 44), ('itiDur', 2.0)]), OrderedDict([('trialIndx', 45), ('itiDur', 2.0)]), OrderedDict([('trialIndx', 46), ('itiDur', 2.0)]), OrderedDict([('trialIndx', 47), ('itiDur', 2.0)]), OrderedDict([('trialIndx', 48), ('itiDur', 2.0)]), OrderedDict([('trialIndx', 49), ('itiDur', 2.0)]), OrderedDict([('trialIndx', 50), ('itiDur', 2.0)]), OrderedDict([('trialIndx', 51), ('itiDur', 2.0)]), OrderedDict([('trialIndx', 52), ('itiDur', 2.0)]), OrderedDict([('trialIndx', 53), ('itiDur', 2.0)]), OrderedDict([('trialIndx', 54), ('itiDur', 2.0)]), OrderedDict([('trialIndx', 55), ('itiDur', 2.0)]), OrderedDict([('trialIndx', 56), ('itiDur', 2.0)]), OrderedDict([('trialIndx', 57), ('itiDur', 2.0)]), OrderedDict([('trialIndx', 58), ('itiDur', 2.0)]), OrderedDict([('trialIndx', 59), ('itiDur', 2.0)])]" valType="str"/>
      <Param name="conditionsFile" updates="None" val="StimList\trialIndxList.xlsx" valType="str"/>
      <Param name="endPoints" updates="None" val="[0, 1]" valType="num"/>
      <Param name="isTrials" updates="None" val="True" valType="bool"/>
      <Param name="loopType" updates="None" val="random" valType="str"/>
      <Param name="nReps" updates="None" val="1" valType="code"/>
      <Param name="name" updates="None" val="sch_loop" valType="code"/>
      <Param name="random seed" updates="None" val="" valType="code"/>
    </LoopInitiator>
    <Routine name="searchTrials"/>
    <LoopTerminator name="sch_loop"/>
    <Routine name="schACCpresen"/>
    <LoopTerminator name="blockOrd"/>
    <Routine name="goodbye"/>
  </Flow>
</PsychoPy2experiment>
